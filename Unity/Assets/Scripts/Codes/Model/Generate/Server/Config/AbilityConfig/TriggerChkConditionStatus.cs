//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

/// <summary>
/// 条件判断触发(判断状态)
/// </summary>
public sealed partial class TriggerChkConditionStatus:  TriggerChkConditionBase 
{
    public TriggerChkConditionStatus(ByteBuf _buf)  : base(_buf) 
    {
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);TriggerImmediatelyTypes = new System.Collections.Generic.List<TriggerImmediatelyBase>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { TriggerImmediatelyBase _e0;  _e0 = TriggerImmediatelyBase.DeserializeTriggerImmediatelyBase(_buf); TriggerImmediatelyTypes.Add(_e0);}}
        ConditionStatusChk = ConditionStatusChkBase.DeserializeConditionStatusChkBase(_buf);
        PostInit();
    }

    public static TriggerChkConditionStatus DeserializeTriggerChkConditionStatus(ByteBuf _buf)
    {
        return new TriggerChkConditionStatus(_buf);
    }

    /// <summary>
    /// 触发的事件
    /// </summary>
    public System.Collections.Generic.List<TriggerImmediatelyBase> TriggerImmediatelyTypes { get; private set; }
    public ConditionStatusChkBase ConditionStatusChk { get; private set; }

    public const int __ID__ = -1907477729;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        base.Resolve(_tables);
        foreach(var _e in TriggerImmediatelyTypes) { _e?.Resolve(_tables); }
        ConditionStatusChk?.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        foreach(var _e in TriggerImmediatelyTypes) { _e?.TranslateText(translator); }
        ConditionStatusChk?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "NeedCount:" + NeedCount + ","
        + "TriggerImmediatelyTypes:" + Bright.Common.StringUtil.CollectionToString(TriggerImmediatelyTypes) + ","
        + "ConditionStatusChk:" + ConditionStatusChk + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}