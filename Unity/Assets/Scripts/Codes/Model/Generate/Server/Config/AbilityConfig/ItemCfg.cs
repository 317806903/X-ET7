//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class ItemCfg: Bright.Config.BeanBase
{
    public ItemCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name_l10n_key = _buf.ReadString(); Name = _buf.ReadString();
        Desc_l10n_key = _buf.ReadString(); Desc = _buf.ReadString();
        Icon = _buf.ReadString();
        QualityType = (QualityType)_buf.ReadInt();
        ItemType = (ItemType)_buf.ReadInt();
        ItemSubType = (ItemSubType)_buf.ReadInt();
        CanStack = _buf.ReadBool();
        ShowPriority = _buf.ReadInt();
        Price = _buf.ReadInt();
        PostInit();
    }

    public static ItemCfg DeserializeItemCfg(ByteBuf _buf)
    {
        return new ItemCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    public string Name { get; private set; }
    public string Name_l10n_key { get; }
    public string Desc { get; private set; }
    public string Desc_l10n_key { get; }
    /// <summary>
    /// icon资源路径
    /// </summary>
    public string Icon { get; private set; }
    public ResIconCfg Icon_Ref { get; private set; }
    /// <summary>
    /// 稀有度(品质类型)
    /// </summary>
    public QualityType QualityType { get; private set; }
    /// <summary>
    /// 物品类型
    /// </summary>
    public ItemType ItemType { get; private set; }
    /// <summary>
    /// 物品子类型
    /// </summary>
    public ItemSubType ItemSubType { get; private set; }
    /// <summary>
    /// 能否叠起来
    /// </summary>
    public bool CanStack { get; private set; }
    /// <summary>
    /// 界面展示优先级(越大越前)
    /// </summary>
    public int ShowPriority { get; private set; }
    /// <summary>
    /// 售价
    /// </summary>
    public int Price { get; private set; }

    public const int __ID__ = -514136015;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.Icon_Ref = (_tables["ResIconCfgCategory"] as ResIconCfgCategory).GetOrDefault(Icon);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Name = translator(Name_l10n_key, Name);
        Desc = translator(Desc_l10n_key, Desc);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Icon:" + Icon + ","
        + "QualityType:" + QualityType + ","
        + "ItemType:" + ItemType + ","
        + "ItemSubType:" + ItemSubType + ","
        + "CanStack:" + CanStack + ","
        + "ShowPriority:" + ShowPriority + ","
        + "Price:" + Price + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}