//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class ActionCfg_CreateEffect: Bright.Config.BeanBase
{
    public ActionCfg_CreateEffect(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        ResId = _buf.ReadString();
        Key = _buf.ReadString();
        Duration = _buf.ReadFloat();
        IsSceneEffect = _buf.ReadBool();
        NodeName = _buf.ReadString();
        OffSetPosition = _buf.ReadVector3();
        RelateForward = _buf.ReadVector3();
        PostInit();
    }

    public static ActionCfg_CreateEffect DeserializeActionCfg_CreateEffect(ByteBuf _buf)
    {
        return new ActionCfg_CreateEffect(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 资源id
    /// </summary>
    public string ResId { get; private set; }
    public ResEffectCfg ResId_Ref { get; private set; }
    /// <summary>
    /// 唯一key(用来便于准确删除)
    /// </summary>
    public string Key { get; private set; }
    /// <summary>
    /// 持续时间(s)
    /// </summary>
    public float Duration { get; private set; }
    /// <summary>
    /// 是否场景特效
    /// </summary>
    public bool IsSceneEffect { get; private set; }
    /// <summary>
    /// 从这个挂载点对应位置生成
    /// </summary>
    public string NodeName { get; private set; }
    /// <summary>
    /// 挂载点的相对偏移
    /// </summary>
    public System.Numerics.Vector3 OffSetPosition { get; private set; }
    /// <summary>
    /// 相对发送者的面向偏移
    /// </summary>
    public System.Numerics.Vector3 RelateForward { get; private set; }

    public const int __ID__ = -1045636034;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.ResId_Ref = (_tables["ResEffectCfgCategory"] as ResEffectCfgCategory).GetOrDefault(ResId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "ResId:" + ResId + ","
        + "Key:" + Key + ","
        + "Duration:" + Duration + ","
        + "IsSceneEffect:" + IsSceneEffect + ","
        + "NodeName:" + NodeName + ","
        + "OffSetPosition:" + OffSetPosition + ","
        + "RelateForward:" + RelateForward + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}