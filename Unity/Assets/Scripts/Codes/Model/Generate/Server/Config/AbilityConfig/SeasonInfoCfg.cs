//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class SeasonInfoCfg: Bright.Config.BeanBase
{
    public SeasonInfoCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        EndTime = _buf.ReadLong();
        AREndlessChallengeCfgId = _buf.ReadString();
        NoAREndlessChallengeCfgId = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BringUpList = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); BringUpList.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);RewardDropItem = new System.Collections.Generic.Dictionary<int, string>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); string _v0;  _v0 = _buf.ReadString();     RewardDropItem.Add(_k0, _v0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);RewardItemListShow = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); RewardItemListShow.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MonsterListShow = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); MonsterListShow.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);TowerListShow = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); TowerListShow.Add(_e0);}}
        BringUpResetCost = _buf.ReadInt();
        PostInit();
    }

    public static SeasonInfoCfg DeserializeSeasonInfoCfg(ByteBuf _buf)
    {
        return new SeasonInfoCfg(_buf);
    }

    /// <summary>
    /// 赛季
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 赛季结束时间
    /// </summary>
    public long EndTime { get; private set; }
    public long EndTime_Millis => EndTime * 1000L;
    /// <summary>
    /// (AR模式)无尽模式的cfgId
    /// </summary>
    public string AREndlessChallengeCfgId { get; private set; }
    public GamePlayBattleLevelCfg AREndlessChallengeCfgId_Ref { get; private set; }
    /// <summary>
    /// (非AR模式)无尽模式的cfgId
    /// </summary>
    public string NoAREndlessChallengeCfgId { get; private set; }
    public GamePlayBattleLevelCfg NoAREndlessChallengeCfgId_Ref { get; private set; }
    /// <summary>
    /// 赛季可养成列表
    /// </summary>
    public System.Collections.Generic.List<string> BringUpList { get; private set; }
    /// <summary>
    /// 赛季结算奖励(1,xx;100,yy;400,zz)
    /// </summary>
    public System.Collections.Generic.Dictionary<int, string> RewardDropItem { get; private set; }
    public System.Collections.Generic.Dictionary<int, DropRuleCfg> RewardDropItem_Ref { get; private set; }
    /// <summary>
    /// 赛季结算奖励展示物品
    /// </summary>
    public System.Collections.Generic.List<string> RewardItemListShow { get; private set; }
    public System.Collections.Generic.List<ItemCfg> RewardItemListShow_Ref { get; private set; }
    /// <summary>
    /// 赛季怪物展示
    /// </summary>
    public System.Collections.Generic.List<string> MonsterListShow { get; private set; }
    public System.Collections.Generic.List<TowerDefense_MonsterCfg> MonsterListShow_Ref { get; private set; }
    /// <summary>
    /// 赛季塔展示
    /// </summary>
    public System.Collections.Generic.List<string> TowerListShow { get; private set; }
    public System.Collections.Generic.List<TowerDefense_TowerCfg> TowerListShow_Ref { get; private set; }
    /// <summary>
    /// 赛季养成重置的所需钻石
    /// </summary>
    public int BringUpResetCost { get; private set; }

    public const int __ID__ = 1221665875;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.AREndlessChallengeCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(AREndlessChallengeCfgId);
        this.NoAREndlessChallengeCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(NoAREndlessChallengeCfgId);
        { DropRuleCfgCategory __table = (DropRuleCfgCategory)_tables["DropRuleCfgCategory"]; this.RewardDropItem_Ref = new System.Collections.Generic.Dictionary<int, DropRuleCfg>(); foreach(var __e in RewardDropItem) { this.RewardDropItem_Ref.Add(__e.Key, __table.GetOrDefault(__e.Value)); } }
        { ItemCfgCategory __table = (ItemCfgCategory)_tables["ItemCfgCategory"]; this.RewardItemListShow_Ref = new System.Collections.Generic.List<ItemCfg>(); foreach(var __e in RewardItemListShow) { this.RewardItemListShow_Ref.Add(__table.GetOrDefault(__e)); } }
        { TowerDefense_MonsterCfgCategory __table = (TowerDefense_MonsterCfgCategory)_tables["TowerDefense_MonsterCfgCategory"]; this.MonsterListShow_Ref = new System.Collections.Generic.List<TowerDefense_MonsterCfg>(); foreach(var __e in MonsterListShow) { this.MonsterListShow_Ref.Add(__table.GetOrDefault(__e)); } }
        { TowerDefense_TowerCfgCategory __table = (TowerDefense_TowerCfgCategory)_tables["TowerDefense_TowerCfgCategory"]; this.TowerListShow_Ref = new System.Collections.Generic.List<TowerDefense_TowerCfg>(); foreach(var __e in TowerListShow) { this.TowerListShow_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "EndTime:" + EndTime + ","
        + "AREndlessChallengeCfgId:" + AREndlessChallengeCfgId + ","
        + "NoAREndlessChallengeCfgId:" + NoAREndlessChallengeCfgId + ","
        + "BringUpList:" + Bright.Common.StringUtil.CollectionToString(BringUpList) + ","
        + "RewardDropItem:" + Bright.Common.StringUtil.CollectionToString(RewardDropItem) + ","
        + "RewardItemListShow:" + Bright.Common.StringUtil.CollectionToString(RewardItemListShow) + ","
        + "MonsterListShow:" + Bright.Common.StringUtil.CollectionToString(MonsterListShow) + ","
        + "TowerListShow:" + Bright.Common.StringUtil.CollectionToString(TowerListShow) + ","
        + "BringUpResetCost:" + BringUpResetCost + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}