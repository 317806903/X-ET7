//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class GamePlayTowerDefenseCfg: Bright.Config.BeanBase
{
    public GamePlayTowerDefenseCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        IsNeedPutHomeAndMonsterCall = _buf.ReadBool();
        PlayerInitGold = _buf.ReadInt();
        InterestOnDeposit = _buf.ReadInt();
        ResTime = _buf.ReadFloat();
        LimitTowerCount = _buf.ReadInt();
        RefreshBuyTowerCost = _buf.ReadInt();
        BuyTowerPoolCount = _buf.ReadInt();
        HomeLife = _buf.ReadInt();
        BuyTowerRefreshRuleCfgId = _buf.ReadString();
        MonsterWaveCallRuleCfgId = _buf.ReadString();
        MonsterWaveCallStartWaveIndex = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MonsterWaveCallCreateActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); MonsterWaveCallCreateActionIds.Add(_e0);}}
        PostInit();
    }

    public static GamePlayTowerDefenseCfg DeserializeGamePlayTowerDefenseCfg(ByteBuf _buf)
    {
        return new GamePlayTowerDefenseCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 是否需要手动放置大本营和出怪点
    /// </summary>
    public bool IsNeedPutHomeAndMonsterCall { get; private set; }
    /// <summary>
    /// 每个玩家初始金币
    /// </summary>
    public int PlayerInitGold { get; private set; }
    /// <summary>
    /// 波次结束结算存款利息(%)
    /// </summary>
    public int InterestOnDeposit { get; private set; }
    /// <summary>
    /// 中间休息时间
    /// </summary>
    public float ResTime { get; private set; }
    /// <summary>
    /// 每人最多允许建造塔数
    /// </summary>
    public int LimitTowerCount { get; private set; }
    /// <summary>
    /// 玩家刷新可购买塔的费用
    /// </summary>
    public int RefreshBuyTowerCost { get; private set; }
    /// <summary>
    /// 可购买塔展示数量
    /// </summary>
    public int BuyTowerPoolCount { get; private set; }
    /// <summary>
    /// 大本营血量
    /// </summary>
    public int HomeLife { get; private set; }
    /// <summary>
    /// 可购买塔刷新规则
    /// </summary>
    public string BuyTowerRefreshRuleCfgId { get; private set; }
    public TowerDefense_BuyTowerRefreshRuleCfg BuyTowerRefreshRuleCfgId_Ref { get; private set; }
    /// <summary>
    /// 刷怪点刷怪规则
    /// </summary>
    public string MonsterWaveCallRuleCfgId { get; private set; }
    /// <summary>
    /// 刷怪点刷怪开始进来时波次(下一波+1)
    /// </summary>
    public int MonsterWaveCallStartWaveIndex { get; private set; }
    /// <summary>
    /// 刷怪点刷怪生成时Action事件id（对应ActionConfig文件夹下表格）
    /// </summary>
    public System.Collections.Generic.List<string> MonsterWaveCallCreateActionIds { get; private set; }

    public const int __ID__ = -1245243737;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.BuyTowerRefreshRuleCfgId_Ref = (_tables["TowerDefense_BuyTowerRefreshRuleCfgCategory"] as TowerDefense_BuyTowerRefreshRuleCfgCategory).GetOrDefault(BuyTowerRefreshRuleCfgId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "IsNeedPutHomeAndMonsterCall:" + IsNeedPutHomeAndMonsterCall + ","
        + "PlayerInitGold:" + PlayerInitGold + ","
        + "InterestOnDeposit:" + InterestOnDeposit + ","
        + "ResTime:" + ResTime + ","
        + "LimitTowerCount:" + LimitTowerCount + ","
        + "RefreshBuyTowerCost:" + RefreshBuyTowerCost + ","
        + "BuyTowerPoolCount:" + BuyTowerPoolCount + ","
        + "HomeLife:" + HomeLife + ","
        + "BuyTowerRefreshRuleCfgId:" + BuyTowerRefreshRuleCfgId + ","
        + "MonsterWaveCallRuleCfgId:" + MonsterWaveCallRuleCfgId + ","
        + "MonsterWaveCallStartWaveIndex:" + MonsterWaveCallStartWaveIndex + ","
        + "MonsterWaveCallCreateActionIds:" + Bright.Common.StringUtil.CollectionToString(MonsterWaveCallCreateActionIds) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}