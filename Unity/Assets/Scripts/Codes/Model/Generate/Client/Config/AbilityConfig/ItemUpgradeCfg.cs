//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class ItemUpgradeCfg: Bright.Config.BeanBase
{
    public ItemUpgradeCfg(ByteBuf _buf) 
    {
        ItemCfgId = _buf.ReadString();
        Level = _buf.ReadInt();
        UpgradeCostDiamondWhenOutGame = _buf.ReadInt();
        UpgradeCostGoldWhenInGame = _buf.ReadInt();
        UpgradeCostCardWhenInGame = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);UpgradeItemGifts = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); UpgradeItemGifts.Add(_e0);}}
        PostInit();
    }

    public static ItemUpgradeCfg DeserializeItemUpgradeCfg(ByteBuf _buf)
    {
        return new ItemUpgradeCfg(_buf);
    }

    /// <summary>
    /// 物品id
    /// </summary>
    public string ItemCfgId { get; private set; }
    /// <summary>
    /// 等级
    /// </summary>
    public int Level { get; private set; }
    /// <summary>
    /// 升到下一级消耗钻石(战斗外)
    /// </summary>
    public int UpgradeCostDiamondWhenOutGame { get; private set; }
    /// <summary>
    /// 升到下一级消耗金币(战斗内)
    /// </summary>
    public int UpgradeCostGoldWhenInGame { get; private set; }
    /// <summary>
    /// 升到下一级消耗卡片(战斗内)
    /// </summary>
    public int UpgradeCostCardWhenInGame { get; private set; }
    /// <summary>
    /// 可选的天赋
    /// </summary>
    public System.Collections.Generic.List<string> UpgradeItemGifts { get; private set; }
    public System.Collections.Generic.List<ItemGiftCfg> UpgradeItemGifts_Ref { get; private set; }

    public const int __ID__ = -373518277;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        { ItemGiftCfgCategory __table = (ItemGiftCfgCategory)_tables["ItemGiftCfgCategory"]; this.UpgradeItemGifts_Ref = new System.Collections.Generic.List<ItemGiftCfg>(); foreach(var __e in UpgradeItemGifts) { this.UpgradeItemGifts_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ItemCfgId:" + ItemCfgId + ","
        + "Level:" + Level + ","
        + "UpgradeCostDiamondWhenOutGame:" + UpgradeCostDiamondWhenOutGame + ","
        + "UpgradeCostGoldWhenInGame:" + UpgradeCostGoldWhenInGame + ","
        + "UpgradeCostCardWhenInGame:" + UpgradeCostCardWhenInGame + ","
        + "UpgradeItemGifts:" + Bright.Common.StringUtil.CollectionToString(UpgradeItemGifts) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}