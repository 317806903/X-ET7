//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class BuffCfg: Bright.Config.BeanBase
{
    public BuffCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Tags = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); Tags.Add(_e0);}}
        Type = _buf.ReadInt();
        Priority = _buf.ReadInt();
        MaxStack = _buf.ReadInt();
        TickTime = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MonitorTriggers = new System.Collections.Generic.List<BuffActionCall>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { BuffActionCall _e0;  _e0 = BuffActionCall.DeserializeBuffActionCall(_buf); MonitorTriggers.Add(_e0);}}
        PostInit();
    }

    public static BuffCfg DeserializeBuffCfg(ByteBuf _buf)
    {
        return new BuffCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// tag标志
    /// </summary>
    public System.Collections.Generic.List<string> Tags { get; private set; }
    /// <summary>
    /// buff类型
    /// </summary>
    public int Type { get; private set; }
    /// <summary>
    /// buff的优先级，优先级越低的buff越后面执行
    /// </summary>
    public int Priority { get; private set; }
    /// <summary>
    /// buff堆叠的规则中需要的层数
    /// </summary>
    public int MaxStack { get; private set; }
    /// <summary>
    /// buff的工作周期，单位：秒
    /// </summary>
    public float TickTime { get; private set; }
    public System.Collections.Generic.List<BuffActionCall> MonitorTriggers { get; private set; }

    public const int __ID__ = 1892616945;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var _e in MonitorTriggers) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in MonitorTriggers) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Tags:" + Bright.Common.StringUtil.CollectionToString(Tags) + ","
        + "Type:" + Type + ","
        + "Priority:" + Priority + ","
        + "MaxStack:" + MaxStack + ","
        + "TickTime:" + TickTime + ","
        + "MonitorTriggers:" + Bright.Common.StringUtil.CollectionToString(MonitorTriggers) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}