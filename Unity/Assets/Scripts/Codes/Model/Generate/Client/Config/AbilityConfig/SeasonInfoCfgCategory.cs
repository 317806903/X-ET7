//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;

namespace ET.AbilityConfig
{
   
/// <summary>
/// 赛季信息总表
/// </summary>
[Config]
public partial class SeasonInfoCfgCategory: ConfigSingleton<SeasonInfoCfgCategory>
{
    private readonly Dictionary<int, SeasonInfoCfg> _dataMap;
    private readonly List<SeasonInfoCfg> _dataList;
    
    public SeasonInfoCfgCategory(ByteBuf _buf)
    {
        _dataMap = new Dictionary<int, SeasonInfoCfg>();
        _dataList = new List<SeasonInfoCfg>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            SeasonInfoCfg _v;
            _v = SeasonInfoCfg.DeserializeSeasonInfoCfg(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
        PostInit();
    }
    
    public bool Contain(int id)
    {
        return _dataMap.ContainsKey(id);
    }

    public Dictionary<int, SeasonInfoCfg> GetAll()
    {
        return _dataMap;
    }
    
    public List<SeasonInfoCfg> DataList => _dataList;

    public SeasonInfoCfg GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public SeasonInfoCfg Get(int key) => _dataMap[key];
    public SeasonInfoCfg this[int key] => _dataMap[key];

    public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var v in _dataList)
        {
            v.Resolve(_tables);
        }
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var v in _dataList)
        {
            v.TranslateText(translator);
        }
    }
    
    public override void TrimExcess()
    {
        _dataMap.TrimExcess();
        _dataList.TrimExcess();
    }
    
    
    public override string ConfigName()
    {
        return typeof(SeasonInfoCfg).Name;
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}