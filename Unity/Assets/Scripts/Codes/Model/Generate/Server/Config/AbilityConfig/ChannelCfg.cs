//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class ChannelCfg: Bright.Config.BeanBase
{
    public ChannelCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        IsNeedSDKLogin = _buf.ReadBool();
        DeviceGameMode = (DeviceGameMode)_buf.ReadInt();
        ResHostServerIP = _buf.ReadString();
        ResGameVersion = _buf.ReadString();
        IsActivity = _buf.ReadBool();
        RouterHttpHost = _buf.ReadString();
        RouterHttpPort = _buf.ReadInt();
        AreaType = _buf.ReadString();
        LanguageType = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);LanguageTypeList = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); LanguageTypeList.Add(_e0);}}
        IsNeedSendEventLog = _buf.ReadBool();
        EventLogURL = _buf.ReadString();
        EventLogKey = _buf.ReadString();
        IsGetMeshFromClient = _buf.ReadBool();
        IsGetDiamondWhenClick = _buf.ReadBool();
        GameJudgeURL = _buf.ReadString();
        IsGameJudgeUseWebView = _buf.ReadBool();
        GameDownLoadURL = _buf.ReadString();
        IsGameDownLoadWebView = _buf.ReadBool();
        IsNeedAppsflyer = _buf.ReadBool();
        AppsflyerKey = _buf.ReadString();
        AppsflyerAppID = _buf.ReadString();
        IsNeedQuestionnaire = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);QuestionnaireCfgId = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); QuestionnaireCfgId.Add(_e0);}}
        DiscordURL = _buf.ReadString();
        PrivacyPolicyURL = _buf.ReadString();
        PostInit();
    }

    public static ChannelCfg DeserializeChannelCfg(ByteBuf _buf)
    {
        return new ChannelCfg(_buf);
    }

    /// <summary>
    /// 渠道id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 是否需要第三方登录
    /// </summary>
    public bool IsNeedSDKLogin { get; private set; }
    /// <summary>
    /// 设备模式
    /// </summary>
    public DeviceGameMode DeviceGameMode { get; private set; }
    /// <summary>
    /// 资源热更新地址
    /// </summary>
    public string ResHostServerIP { get; private set; }
    /// <summary>
    /// 版本
    /// </summary>
    public string ResGameVersion { get; private set; }
    /// <summary>
    /// 是否活动模式
    /// </summary>
    public bool IsActivity { get; private set; }
    /// <summary>
    /// 服务器地址
    /// </summary>
    public string RouterHttpHost { get; private set; }
    /// <summary>
    /// 服务器端口
    /// </summary>
    public int RouterHttpPort { get; private set; }
    /// <summary>
    /// 区域
    /// </summary>
    public string AreaType { get; private set; }
    /// <summary>
    /// 语言
    /// </summary>
    public string LanguageType { get; private set; }
    /// <summary>
    /// 能切换的语言
    /// </summary>
    public System.Collections.Generic.List<string> LanguageTypeList { get; private set; }
    /// <summary>
    /// 是否发送eventlog
    /// </summary>
    public bool IsNeedSendEventLog { get; private set; }
    /// <summary>
    /// eventlog的地址
    /// </summary>
    public string EventLogURL { get; private set; }
    /// <summary>
    /// eventlog的Key
    /// </summary>
    public string EventLogKey { get; private set; }
    /// <summary>
    /// 是否从Client获取Mesh
    /// </summary>
    public bool IsGetMeshFromClient { get; private set; }
    /// <summary>
    /// 是否点击时获取钻石
    /// </summary>
    public bool IsGetDiamondWhenClick { get; private set; }
    /// <summary>
    /// 商店评分URL
    /// </summary>
    public string GameJudgeURL { get; private set; }
    /// <summary>
    /// 跳转商店评分是否使用webView
    /// </summary>
    public bool IsGameJudgeUseWebView { get; private set; }
    /// <summary>
    /// 游戏下载URL
    /// </summary>
    public string GameDownLoadURL { get; private set; }
    /// <summary>
    /// 跳转游戏下载是否使用webView
    /// </summary>
    public bool IsGameDownLoadWebView { get; private set; }
    /// <summary>
    /// 是否需要Appsflyer
    /// </summary>
    public bool IsNeedAppsflyer { get; private set; }
    /// <summary>
    /// Appsflyer的Key
    /// </summary>
    public string AppsflyerKey { get; private set; }
    /// <summary>
    /// Appsflyer的appID
    /// </summary>
    public string AppsflyerAppID { get; private set; }
    /// <summary>
    /// 是否需要Questionnaire
    /// </summary>
    public bool IsNeedQuestionnaire { get; private set; }
    /// <summary>
    /// QuestionnaireCfgId
    /// </summary>
    public System.Collections.Generic.List<string> QuestionnaireCfgId { get; private set; }
    public System.Collections.Generic.List<QuestionnaireCfg> QuestionnaireCfgId_Ref { get; private set; }
    /// <summary>
    /// 社区URL
    /// </summary>
    public string DiscordURL { get; private set; }
    /// <summary>
    /// 隐私政策URL
    /// </summary>
    public string PrivacyPolicyURL { get; private set; }

    public const int __ID__ = 62628993;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        { QuestionnaireCfgCategory __table = (QuestionnaireCfgCategory)_tables["QuestionnaireCfgCategory"]; this.QuestionnaireCfgId_Ref = new System.Collections.Generic.List<QuestionnaireCfg>(); foreach(var __e in QuestionnaireCfgId) { this.QuestionnaireCfgId_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "IsNeedSDKLogin:" + IsNeedSDKLogin + ","
        + "DeviceGameMode:" + DeviceGameMode + ","
        + "ResHostServerIP:" + ResHostServerIP + ","
        + "ResGameVersion:" + ResGameVersion + ","
        + "IsActivity:" + IsActivity + ","
        + "RouterHttpHost:" + RouterHttpHost + ","
        + "RouterHttpPort:" + RouterHttpPort + ","
        + "AreaType:" + AreaType + ","
        + "LanguageType:" + LanguageType + ","
        + "LanguageTypeList:" + Bright.Common.StringUtil.CollectionToString(LanguageTypeList) + ","
        + "IsNeedSendEventLog:" + IsNeedSendEventLog + ","
        + "EventLogURL:" + EventLogURL + ","
        + "EventLogKey:" + EventLogKey + ","
        + "IsGetMeshFromClient:" + IsGetMeshFromClient + ","
        + "IsGetDiamondWhenClick:" + IsGetDiamondWhenClick + ","
        + "GameJudgeURL:" + GameJudgeURL + ","
        + "IsGameJudgeUseWebView:" + IsGameJudgeUseWebView + ","
        + "GameDownLoadURL:" + GameDownLoadURL + ","
        + "IsGameDownLoadWebView:" + IsGameDownLoadWebView + ","
        + "IsNeedAppsflyer:" + IsNeedAppsflyer + ","
        + "AppsflyerKey:" + AppsflyerKey + ","
        + "AppsflyerAppID:" + AppsflyerAppID + ","
        + "IsNeedQuestionnaire:" + IsNeedQuestionnaire + ","
        + "QuestionnaireCfgId:" + Bright.Common.StringUtil.CollectionToString(QuestionnaireCfgId) + ","
        + "DiscordURL:" + DiscordURL + ","
        + "PrivacyPolicyURL:" + PrivacyPolicyURL + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}