//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class ActionCfg_FloatingText: Bright.Config.BeanBase
{
    public ActionCfg_FloatingText(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        IsOnlySelfShow = _buf.ReadBool();
        ResEffectId = _buf.ReadString();
        PlayAudioActionId = _buf.ReadString();
        Duration = _buf.ReadFloat();
        LeftText_l10n_key = _buf.ReadString(); LeftText = _buf.ReadString();
        RightText_l10n_key = _buf.ReadString(); RightText = _buf.ReadString();
        TopText_l10n_key = _buf.ReadString(); TopText = _buf.ReadString();
        BottomText_l10n_key = _buf.ReadString(); BottomText = _buf.ReadString();
        VerticalOffset = _buf.ReadFloat();
        PostInit();
    }

    public static ActionCfg_FloatingText DeserializeActionCfg_FloatingText(ByteBuf _buf)
    {
        return new ActionCfg_FloatingText(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 是否仅自己可见
    /// </summary>
    public bool IsOnlySelfShow { get; private set; }
    /// <summary>
    /// 特效资源id
    /// </summary>
    public string ResEffectId { get; private set; }
    public ResEffectCfg ResEffectId_Ref { get; private set; }
    /// <summary>
    /// 音效资源id
    /// </summary>
    public string PlayAudioActionId { get; private set; }
    public ActionCfg_PlayAudio PlayAudioActionId_Ref { get; private set; }
    /// <summary>
    /// 持续时间(s),-1表示永久
    /// </summary>
    public float Duration { get; private set; }
    /// <summary>
    /// 左侧显示内容
    /// </summary>
    public string LeftText { get; private set; }
    public string LeftText_l10n_key { get; }
    /// <summary>
    /// 右侧显示内容
    /// </summary>
    public string RightText { get; private set; }
    public string RightText_l10n_key { get; }
    /// <summary>
    /// 上侧显示内容
    /// </summary>
    public string TopText { get; private set; }
    public string TopText_l10n_key { get; }
    /// <summary>
    /// 下侧显示内容
    /// </summary>
    public string BottomText { get; private set; }
    public string BottomText_l10n_key { get; }
    /// <summary>
    /// 身高外再次偏移高度
    /// </summary>
    public float VerticalOffset { get; private set; }

    public const int __ID__ = -2518812;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.ResEffectId_Ref = (_tables["ResEffectCfgCategory"] as ResEffectCfgCategory).GetOrDefault(ResEffectId);
        this.PlayAudioActionId_Ref = (_tables["ActionCfg_PlayAudioCategory"] as ActionCfg_PlayAudioCategory).GetOrDefault(PlayAudioActionId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        LeftText = translator(LeftText_l10n_key, LeftText);
        RightText = translator(RightText_l10n_key, RightText);
        TopText = translator(TopText_l10n_key, TopText);
        BottomText = translator(BottomText_l10n_key, BottomText);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "IsOnlySelfShow:" + IsOnlySelfShow + ","
        + "ResEffectId:" + ResEffectId + ","
        + "PlayAudioActionId:" + PlayAudioActionId + ","
        + "Duration:" + Duration + ","
        + "LeftText:" + LeftText + ","
        + "RightText:" + RightText + ","
        + "TopText:" + TopText + ","
        + "BottomText:" + BottomText + ","
        + "VerticalOffset:" + VerticalOffset + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}