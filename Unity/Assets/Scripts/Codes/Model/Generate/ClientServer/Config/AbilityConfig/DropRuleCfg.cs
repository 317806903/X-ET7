//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class DropRuleCfg: Bright.Config.BeanBase
{
    public DropRuleCfg(ByteBuf _buf) 
    {
        DropRuleId = _buf.ReadString();
        DropRuleType = (DropRuleType)_buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);DropItems = new System.Collections.Generic.List<DropItemBase>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { DropItemBase _e0;  _e0 = DropItemBase.DeserializeDropItemBase(_buf); DropItems.Add(_e0);}}
        PostInit();
    }

    public static DropRuleCfg DeserializeDropRuleCfg(ByteBuf _buf)
    {
        return new DropRuleCfg(_buf);
    }

    /// <summary>
    /// 掉落规则
    /// </summary>
    public string DropRuleId { get; private set; }
    /// <summary>
    /// 掉落类型
    /// </summary>
    public DropRuleType DropRuleType { get; private set; }
    public System.Collections.Generic.List<DropItemBase> DropItems { get; private set; }

    public const int __ID__ = -785746503;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var _e in DropItems) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in DropItems) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "DropRuleId:" + DropRuleId + ","
        + "DropRuleType:" + DropRuleType + ","
        + "DropItems:" + Bright.Common.StringUtil.CollectionToString(DropItems) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}