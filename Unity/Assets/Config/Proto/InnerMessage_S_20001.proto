syntax = "proto3";
// using 

package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 1;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
	int64 InstanceId = 4;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
	int64 InstanceId = 4;
	int32 Time = 5;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
	int64 OldInstanceId = 4;
	int64 InstanceId = 5;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 Type = 4;
	int64 InstanceId = 5;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;  // 密码
	int32 LoginType = 4;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

//ResponseType A2G_LoginByAccount
message G2A_LoginByAccount // IActorRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;  // 密码
	int32 LoginType = 4;
}

message A2G_LoginByAccount // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 PlayerId = 4;
}

//ResponseType A2G_GetAccountInfo
message G2A_GetAccountInfo // IActorRequest
{
	int32 RpcId = 1;
	string AccountId = 2;
}

message A2G_GetAccountInfo // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes AccountComponentBytes = 4;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 1;
}

message ObjectQueryResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes Entity = 4;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 OldInstanceId = 2;
	bytes Unit = 3;
	repeated bytes Entitys = 4;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_GetRoomIdByPlayer
message G2R_GetRoomIdByPlayer // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
}

message R2G_GetRoomIdByPlayer // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 RoomId = 4;
	int32 RoomStatus = 5;
	int32 RoomType = 6;
	int32 SubRoomType = 7;
}

//ResponseType R2G_GetRoomList
message G2R_GetRoomList // IActorRequest
{
	int32 RpcId = 1;
	int32 IsARRoom = 2;
}

message R2G_GetRoomList // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	repeated bytes RoomInfos = 4;
}

//ResponseType R2G_GetRoomInfo
message G2R_GetRoomInfo // IActorRequest
{
	int32 RpcId = 1;
	int64 RoomId = 2;
}

message R2G_GetRoomInfo // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes RoomInfo = 4;
	repeated bytes RoomMemberInfos = 5;
}

//ResponseType R2G_CreateRoom
message G2R_CreateRoom // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	string BattleCfgId = 3;
	int32 RoomType = 4;
	int32 SubRoomType = 5;
}

message R2G_CreateRoom // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 RoomId = 4;
}

//ResponseType R2G_JoinRoom
message G2R_JoinRoom // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
}

message R2G_JoinRoom // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 RoomType = 4;
	int32 SubRoomType = 5;
}

//ResponseType R2G_QuitRoom
message G2R_QuitRoom // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
}

message R2G_QuitRoom // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_KickMemberOutRoom
message G2R_KickMemberOutRoom // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 BeKickPlayerId = 3;
	int64 RoomId = 4;
}

message R2G_KickMemberOutRoom // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_ChgRoomStatus
message G2R_ChgRoomStatus // IActorRequest
{
	int32 RpcId = 1;
	int64 RoomId = 3;
	int32 RoomStatus = 4;
}

message R2G_ChgRoomStatus // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_ChgRoomMemberStatus
message G2R_ChgRoomMemberStatus // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
	int32 IsReady = 4;
}

message R2G_ChgRoomMemberStatus // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 IsReady = 4;
}

//ResponseType R2G_ChgRoomMemberSeat
message G2R_ChgRoomMemberSeat // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
	int32 NewSeat = 4;
}

message R2G_ChgRoomMemberSeat // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_ChgRoomMemberTeam
message G2R_ChgRoomMemberTeam // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
	int32 NewTeam = 4;
}

message R2G_ChgRoomMemberTeam // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_SetARRoomInfo
message G2R_SetARRoomInfo // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
	string ARSceneId = 4;
	string ARMeshDownLoadUrl = 5;
}

message R2G_SetARRoomInfo // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_ChgRoomBattleLevelCfg
message G2R_ChgRoomBattleLevelCfg // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
	string NewBattleCfgId = 4;
}

message R2G_ChgRoomBattleLevelCfg // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2R_CreateDynamicMap
message R2M_CreateDynamicMap // IActorRequest
{
	int32 RpcId = 1;
	bytes RoomInfo = 2;
	repeated bytes RoomMemberInfos = 3;
	string ARMeshDownLoadUrl = 4;
}

message M2R_CreateDynamicMap // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 DynamicMapInstanceId = 4;
}

//ResponseType M2R_DestroyDynamicMap
message R2M_DestroyDynamicMap // IActorRequest
{
	int32 RpcId = 1;
	int64 DynamicMapInstanceId = 2;
}

message M2R_DestroyDynamicMap // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2M_EnterMapResponse
message M2M_EnterMapRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 PlayerLevel = 3;
	string GamePlayBattleLevelCfgId = 4;
}

message M2M_EnterMapResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2R_StartBattle
message R2G_StartBattle // IActorRequest
{
	int32 RpcId = 1;
	string GamePlayBattleLevelCfgId = 2;
	int64 DynamicMapInstanceId = 3;
}

message G2R_StartBattle // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2R_BeKickedMember
message R2G_BeKickedMember // IActorRequest
{
	int32 RpcId = 1;
}

message G2R_BeKickedMember // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2M_QuitBattle
message M2G_QuitBattle // IActorRequest
{
	int32 RpcId = 1;
}

message G2M_QuitBattle // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2M_MemberQuitBattle
message M2G_MemberQuitBattle // IActorRequest
{
	int32 RpcId = 1;
}

message G2M_MemberQuitBattle // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2M_MemberReturnRoomFromBattle
message M2G_MemberReturnRoomFromBattle // IActorRequest
{
	int32 RpcId = 1;
}

message G2M_MemberReturnRoomFromBattle // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_ReturnBackBattle
message G2R_ReturnBackBattle // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
}

message R2G_ReturnBackBattle // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2R_ChkIsBattleEnd
message R2M_ChkIsBattleEnd // IActorRequest
{
	int32 RpcId = 1;
}

message M2R_ChkIsBattleEnd // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 IsBattleEnd = 4;
}

//ResponseType M2R_MemberQuitBattle
message R2M_MemberQuitBattle // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
}

message M2R_MemberQuitBattle // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2M_MemberQuitRoom
message M2R_MemberQuitRoom // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int64 RoomId = 3;
}

message R2M_MemberQuitRoom // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2M_NoticeRoomBattleEnd
message M2R_NoticeRoomBattleEnd // IActorRequest
{
	int32 RpcId = 1;
	int64 RoomId = 2;
}

message R2M_NoticeRoomBattleEnd // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2G_GetRank
message G2R_GetRank // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 RankType = 3;
}

message R2G_GetRank // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes RankShowComponentBytes = 4;
}

//ResponseType R2G_SetPlayerRank
message G2R_SetPlayerRank // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 RankType = 3;
	int64 Score = 4;
}

message R2G_SetPlayerRank // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType P2G_GetPlayerCache
message G2P_GetPlayerCache // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 PlayerModelType = 3;
}

message P2G_GetPlayerCache // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes PlayerModelComponentBytes = 4;
}

//ResponseType P2G_SetPlayerCache
message G2P_SetPlayerCache // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 PlayerModelType = 3;
	bytes PlayerModelComponentBytes = 4;
}

message P2G_SetPlayerCache // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}
