//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class ItemGiftCfg: Bright.Config.BeanBase
{
    public ItemGiftCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name_l10n_key = _buf.ReadString(); Name = _buf.ReadString();
        Desc_l10n_key = _buf.ReadString(); Desc = _buf.ReadString();
        Icon = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); ActionIds.Add(_e0);}}
        PostInit();
    }

    public static ItemGiftCfg DeserializeItemGiftCfg(ByteBuf _buf)
    {
        return new ItemGiftCfg(_buf);
    }

    /// <summary>
    /// 天赋id
    /// </summary>
    public string Id { get; private set; }
    public string Name { get; private set; }
    public string Name_l10n_key { get; }
    public string Desc { get; private set; }
    public string Desc_l10n_key { get; }
    /// <summary>
    /// icon资源路径
    /// </summary>
    public string Icon { get; private set; }
    public ResIconCfg Icon_Ref { get; private set; }
    /// <summary>
    /// action事件
    /// </summary>
    public System.Collections.Generic.List<string> ActionIds { get; private set; }

    public const int __ID__ = 1161333345;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.Icon_Ref = (_tables["ResIconCfgCategory"] as ResIconCfgCategory).GetOrDefault(Icon);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Name = translator(Name_l10n_key, Name);
        Desc = translator(Desc_l10n_key, Desc);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Icon:" + Icon + ","
        + "ActionIds:" + Bright.Common.StringUtil.CollectionToString(ActionIds) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}