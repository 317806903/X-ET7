//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;

namespace ET.AbilityConfig
{
   
[Config]
public partial class GlobalSettingCfgCategory: ConfigSingleton<GlobalSettingCfgCategory>
{

     private readonly GlobalSettingCfg _data;

    public GlobalSettingCfgCategory(ByteBuf _buf)
    {
        int n = _buf.ReadSize();
        if (n != 1) throw new SerializationException("table mode=one, but size != 1");
        _data = GlobalSettingCfg.DeserializeGlobalSettingCfg(_buf);
        PostInit();
    }

    /// <summary>
    /// 测试描述11
    /// </summary>
     public int TestGlobalSetting1 => _data.TestGlobalSetting1;
    /// <summary>
    /// 测试描述21
    /// </summary>
     public int TestGlobalSetting2 => _data.TestGlobalSetting2;
     public string TestGlobalSetting3 => _data.TestGlobalSetting3;
     public System.Collections.Generic.List<string> TestGlobalSetting4 => _data.TestGlobalSetting4;
    /// <summary>
    /// AR模式新手指引关卡的cfgId
    /// </summary>
     public string ARTutorialFirstCfgId => _data.ARTutorialFirstCfgId;
    /// <summary>
    /// AR模式PVP的cfgId
    /// </summary>
     public string ARPVPCfgId => _data.ARPVPCfgId;
    /// <summary>
    /// AR模式PVE无尽模式的cfgId
    /// </summary>
     public string AREndlessChallengeCfgId => _data.AREndlessChallengeCfgId;
    /// <summary>
    /// 非AR模式PVP的cfgId
    /// </summary>
     public string NoARPVPCfgId => _data.NoARPVPCfgId;
    /// <summary>
    /// 非AR模式PVE无尽模式的cfgId
    /// </summary>
     public string NoAREndlessChallengeCfgId => _data.NoAREndlessChallengeCfgId;
    /// <summary>
    /// 是否显示伤害数字展示
    /// </summary>
     public bool ShowDamage => _data.ShowDamage;
    /// <summary>
    /// 是否显示金币获得展示
    /// </summary>
     public bool ShowGetGold => _data.ShowGetGold;
     public System.Collections.Generic.List<string> AvatarIcons => _data.AvatarIcons;
    /// <summary>
    /// 新手世界观信息
    /// </summary>
     public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> BeginnersGuideImgs => _data.BeginnersGuideImgs;
    /// <summary>
    /// 初始体力值
    /// </summary>
     public int InitialPhysicalStrength => _data.InitialPhysicalStrength;
    /// <summary>
    /// 体力值上限
    /// </summary>
     public int UpperLimitOfPhysicalStrength => _data.UpperLimitOfPhysicalStrength;
    /// <summary>
    /// 体力值恢复时长(秒)
    /// </summary>
     public int RecoverTimeOfPhysicalStrength => _data.RecoverTimeOfPhysicalStrength;
    /// <summary>
    /// 体力值恢复增加量
    /// </summary>
     public int RecoverIncreaseOfPhysicalStrength => _data.RecoverIncreaseOfPhysicalStrength;
    /// <summary>
    /// 看广告体力值恢复量
    /// </summary>
     public int RecoverIncreaseOfPhysicalStrengthByAd => _data.RecoverIncreaseOfPhysicalStrengthByAd;
    /// <summary>
    /// AR模式PVE所需体力
    /// </summary>
     public int ARPVECfgTakePhsicalStrength => _data.ARPVECfgTakePhsicalStrength;
    /// <summary>
    /// AR模式PVP所需体力
    /// </summary>
     public int ARPVPCfgTakePhsicalStrength => _data.ARPVPCfgTakePhsicalStrength;
    /// <summary>
    /// AR模式PVE无尽模式所需体力
    /// </summary>
     public int AREndlessChallengeTakePhsicalStrength => _data.AREndlessChallengeTakePhsicalStrength;
    /// <summary>
    /// 体力系统是否显示
    /// </summary>
     public bool PhysicalStrengthShow => _data.PhysicalStrengthShow;
    /// <summary>
    /// 两塔允许最近距离
    /// </summary>
     public float TowerDefenseNearTowerDis => _data.TowerDefenseNearTowerDis;
    /// <summary>
    /// 广告系统是否可用
    /// </summary>
     public bool AdmobAvailable => _data.AdmobAvailable;
    /// <summary>
    /// 复活时超时时间(秒)
    /// </summary>
     public int RecoverTimeoutTime => _data.RecoverTimeoutTime;
    /// <summary>
    /// 复活时增加生命
    /// </summary>
     public int RecoverAddHp => _data.RecoverAddHp;
    /// <summary>
    /// 复活时增加金币
    /// </summary>
     public int RecoverAddGold => _data.RecoverAddGold;
    /// <summary>
    /// 初始背包物体
    /// </summary>
     public System.Collections.Generic.List<string> InitialBackpackItem => _data.InitialBackpackItem;
    /// <summary>
    /// (展示模式)初始背包物体
    /// </summary>
     public System.Collections.Generic.List<string> DemoShowInitialBackpackItem => _data.DemoShowInitialBackpackItem;
    /// <summary>
    /// 需要重新评估游戏的时刻
    /// </summary>
     public long GameReJudgeTime => _data.GameReJudgeTime;
    /// <summary>
    /// 最多出战卡数
    /// </summary>
     public int MaxBattleCardNum => _data.MaxBattleCardNum;
    /// <summary>
    /// (街机模式)管理员密码
    /// </summary>
     public string GameModeArcadeMasterPassword => _data.GameModeArcadeMasterPassword;
    /// <summary>
    /// (街机模式)初始背包物体
    /// </summary>
     public System.Collections.Generic.List<string> GameModeArcadeInitialBackpackItem => _data.GameModeArcadeInitialBackpackItem;
    /// <summary>
    /// (街机模式)超时时间(秒)
    /// </summary>
     public int GameModeArcadeSessionTimeOut => _data.GameModeArcadeSessionTimeOut;
    /// <summary>
    /// (街机模式)代币换算成money的系数
    /// </summary>
     public float GameModeArcadeCoin2Money => _data.GameModeArcadeCoin2Money;
    /// <summary>
    /// (街机模式)微信支付URL请求
    /// </summary>
     public string GameModeArcadeCoin2WXUrl => _data.GameModeArcadeCoin2WXUrl;
    /// <summary>
    /// (街机模式)PVP的cfgId
    /// </summary>
     public string GameModeArcadeARPVPCfgId => _data.GameModeArcadeARPVPCfgId;
    /// <summary>
    /// (街机模式)PVE无尽模式的cfgId
    /// </summary>
     public string GameModeArcadeAREndlessChallengeCfgId => _data.GameModeArcadeAREndlessChallengeCfgId;
    /// <summary>
    /// (街机模式)非AR模式PVP的cfgId
    /// </summary>
     public string GameModeArcadeNoARPVPCfgId => _data.GameModeArcadeNoARPVPCfgId;
    /// <summary>
    /// (街机模式)非AR模式PVE无尽模式的cfgId
    /// </summary>
     public string GameModeArcadeNoAREndlessChallengeCfgId => _data.GameModeArcadeNoAREndlessChallengeCfgId;
    /// <summary>
    /// (街机模式)管理员扫描地形的cfgId
    /// </summary>
     public string GameModeArcadeARScanMeshCfgId => _data.GameModeArcadeARScanMeshCfgId;
    /// <summary>
    /// (街机模式)非AR管理员扫描地形的cfgId
    /// </summary>
     public string GameModeArcadeNoARScanMeshCfgId => _data.GameModeArcadeNoARScanMeshCfgId;
    /// <summary>
    /// (街机模式)复活时超时时间(秒)
    /// </summary>
     public int GameModeArcadeRecoverTimeoutTime => _data.GameModeArcadeRecoverTimeoutTime;
    /// <summary>
    /// (街机模式)复活时增加生命
    /// </summary>
     public int GameModeArcadeRecoverAddHp => _data.GameModeArcadeRecoverAddHp;
    /// <summary>
    /// (街机模式)复活时增加金币
    /// </summary>
     public int GameModeArcadeRecoverAddGold => _data.GameModeArcadeRecoverAddGold;
    /// <summary>
    /// (街机模式)PVP免费的复活次数
    /// </summary>
     public int GameModeArcadePVPReviveTimeWhenFree => _data.GameModeArcadePVPReviveTimeWhenFree;
    /// <summary>
    /// (街机模式)PVP付费的复活次数
    /// </summary>
     public int GameModeArcadePVPReviveTimeWhenPay => _data.GameModeArcadePVPReviveTimeWhenPay;
    /// <summary>
    /// (街机模式)PVP复活需消耗代币
    /// </summary>
     public int GameModeArcadePVPCostWhenRevive => _data.GameModeArcadePVPCostWhenRevive;
    /// <summary>
    /// (街机模式)PVP开始战斗需消耗代币
    /// </summary>
     public int GameModeArcadePVPCostWhenStart => _data.GameModeArcadePVPCostWhenStart;
    /// <summary>
    /// (街机模式)无尽模式免费的复活次数
    /// </summary>
     public int GameModeArcadeEndlessChallengeReviveTimeWhenFree => _data.GameModeArcadeEndlessChallengeReviveTimeWhenFree;
    /// <summary>
    /// (街机模式)无尽模式付费的复活次数
    /// </summary>
     public int GameModeArcadeEndlessChallengeReviveTimeWhenPay => _data.GameModeArcadeEndlessChallengeReviveTimeWhenPay;
    /// <summary>
    /// (街机模式)无尽模式复活需消耗代币
    /// </summary>
     public int GameModeArcadeEndlessChallengeCostWhenRevive => _data.GameModeArcadeEndlessChallengeCostWhenRevive;
    /// <summary>
    /// (街机模式)无尽模式开始战斗需消耗代币
    /// </summary>
     public int GameModeArcadeEndlessChallengeCostWhenStart => _data.GameModeArcadeEndlessChallengeCostWhenStart;

    public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        _data.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        _data.TranslateText(translator);
    }

    
    public override string ConfigName()
    {
        return typeof(GlobalSettingCfg).Name;
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}