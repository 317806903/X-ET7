//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class TimelineCfg: Bright.Config.BeanBase
{
    public TimelineCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Duration = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Nodes = new System.Collections.Generic.List<TimelineNode>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { TimelineNode _e0;  _e0 = TimelineNode.DeserializeTimelineNode(_buf); Nodes.Add(_e0);}}
        PostInit();
    }

    public static TimelineCfg DeserializeTimelineCfg(ByteBuf _buf)
    {
        return new TimelineCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 总时长(单位秒)
    /// </summary>
    public float Duration { get; private set; }
    /// <summary>
    /// 节点列表,Timeline运行多久之后发生，单位：秒
    /// </summary>
    public System.Collections.Generic.List<TimelineNode> Nodes { get; private set; }

    public const int __ID__ = 883877955;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var _e in Nodes) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Nodes) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Duration:" + Duration + ","
        + "Nodes:" + Bright.Common.StringUtil.CollectionToString(Nodes) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}