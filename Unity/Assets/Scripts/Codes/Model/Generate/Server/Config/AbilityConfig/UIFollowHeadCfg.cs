//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class UIFollowHeadCfg: Bright.Config.BeanBase
{
    public UIFollowHeadCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        IsCreateAtDefault = _buf.ReadBool();
        OffsetDis = _buf.ReadFloat();
        HoldDis = _buf.ReadFloat();
        HoldRotation = _buf.ReadFloat();
        IsKeepHeight = _buf.ReadBool();
        MoveSpeed = _buf.ReadFloat();
        MoveSpeedWhenToTop = _buf.ReadFloat();
        RotationSpeed = _buf.ReadFloat();
        RotationXLimit = _buf.ReadFloat();
        PostInit();
    }

    public static UIFollowHeadCfg DeserializeUIFollowHeadCfg(ByteBuf _buf)
    {
        return new UIFollowHeadCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 是否在默认点创建
    /// </summary>
    public bool IsCreateAtDefault { get; private set; }
    /// <summary>
    /// 初始远近距离
    /// </summary>
    public float OffsetDis { get; private set; }
    /// <summary>
    /// 保持不动时的远近阈值
    /// </summary>
    public float HoldDis { get; private set; }
    /// <summary>
    /// 保持不动时的角度偏移阈值(角度)
    /// </summary>
    public float HoldRotation { get; private set; }
    /// <summary>
    /// 是否始终保持水平高
    /// </summary>
    public bool IsKeepHeight { get; private set; }
    /// <summary>
    /// 开始位移时的位移百分比
    /// </summary>
    public float MoveSpeed { get; private set; }
    /// <summary>
    /// 多少秒后进入最高移动的位移百分比
    /// </summary>
    public float MoveSpeedWhenToTop { get; private set; }
    /// <summary>
    /// 开始旋转时的位移百分比
    /// </summary>
    public float RotationSpeed { get; private set; }
    /// <summary>
    /// 低头时最大仰角(角度)
    /// </summary>
    public float RotationXLimit { get; private set; }

    public const int __ID__ = -782112961;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "IsCreateAtDefault:" + IsCreateAtDefault + ","
        + "OffsetDis:" + OffsetDis + ","
        + "HoldDis:" + HoldDis + ","
        + "HoldRotation:" + HoldRotation + ","
        + "IsKeepHeight:" + IsKeepHeight + ","
        + "MoveSpeed:" + MoveSpeed + ","
        + "MoveSpeedWhenToTop:" + MoveSpeedWhenToTop + ","
        + "RotationSpeed:" + RotationSpeed + ","
        + "RotationXLimit:" + RotationXLimit + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}