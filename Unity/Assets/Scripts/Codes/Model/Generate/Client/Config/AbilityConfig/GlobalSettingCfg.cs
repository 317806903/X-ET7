//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class GlobalSettingCfg: Bright.Config.BeanBase
{
    public GlobalSettingCfg(ByteBuf _buf) 
    {
        TestGlobalSetting1 = _buf.ReadInt();
        TestGlobalSetting2 = _buf.ReadInt();
        TestGlobalSetting3 = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);TestGlobalSetting4 = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); TestGlobalSetting4.Add(_e0);}}
        ARTutorialFirstCfgId = _buf.ReadString();
        ARPVPCfgId = _buf.ReadString();
        AREndlessChallengeCfgId = _buf.ReadString();
        NoARPVPCfgId = _buf.ReadString();
        NoAREndlessChallengeCfgId = _buf.ReadString();
        ShowDamage = _buf.ReadBool();
        ShowGetGold = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AvatarIcons = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); AvatarIcons.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BGList = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); BGList.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BeginnersGuideImgs = new System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.Dictionary<string, string> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.Dictionary<string, string>(n1 * 3 / 2);for(var i1 = 0 ; i1 < n1 ; i1++) { string _k1;  _k1 = _buf.ReadString(); string _v1;  _v1 = _buf.ReadString();     _e0.Add(_k1, _v1);}} BeginnersGuideImgs.Add(_e0);}}
        InitialPhysicalStrength = _buf.ReadInt();
        UpperLimitOfPhysicalStrength = _buf.ReadInt();
        RecoverTimeOfPhysicalStrength = _buf.ReadInt();
        RecoverIncreaseOfPhysicalStrength = _buf.ReadInt();
        RecoverIncreaseOfPhysicalStrengthByAd = _buf.ReadInt();
        ARPVECfgTakePhsicalStrength = _buf.ReadInt();
        ARPVPCfgTakePhsicalStrength = _buf.ReadInt();
        AREndlessChallengeTakePhsicalStrength = _buf.ReadInt();
        PhysicalStrengthShow = _buf.ReadBool();
        TowerDefenseNearTowerDis = _buf.ReadFloat();
        AdmobAvailable = _buf.ReadBool();
        RecoverTimeoutTime = _buf.ReadInt();
        RecoverAddHp = _buf.ReadInt();
        RecoverAddGold = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);InitialBackpackItem = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); InitialBackpackItem.Add(_e0);}}
        GameReJudgeTime = _buf.ReadLong();
        MaxBattleCardNum = _buf.ReadInt();
        MaxBattleSkillNum = _buf.ReadInt();
        SeasonStartTime = _buf.ReadLong();
        SeasonDurationTime = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);DemoShowInitialBackpackItem = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); DemoShowInitialBackpackItem.Add(_e0);}}
        GameModeArcadeMasterPassword = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);GameModeArcadeInitialBackpackItem = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); GameModeArcadeInitialBackpackItem.Add(_e0);}}
        GameModeArcadeSessionTimeOut = _buf.ReadInt();
        GameModeArcadeCoin2Money = _buf.ReadFloat();
        GameModeArcadeARPVPCfgId = _buf.ReadString();
        GameModeArcadeAREndlessChallengeCfgId = _buf.ReadString();
        GameModeArcadeNoARPVPCfgId = _buf.ReadString();
        GameModeArcadeNoAREndlessChallengeCfgId = _buf.ReadString();
        GameModeArcadeARScanMeshCfgId = _buf.ReadString();
        GameModeArcadeNoARScanMeshCfgId = _buf.ReadString();
        GameModeArcadeRecoverTimeoutTime = _buf.ReadInt();
        GameModeArcadeRecoverAddHp = _buf.ReadInt();
        GameModeArcadeRecoverAddGold = _buf.ReadInt();
        GameModeArcadePVPReviveTimeWhenFree = _buf.ReadInt();
        GameModeArcadePVPReviveTimeWhenPay = _buf.ReadInt();
        GameModeArcadePVPCostWhenRevive = _buf.ReadInt();
        GameModeArcadePVPCostWhenStart = _buf.ReadInt();
        GameModeArcadeEndlessChallengeReviveTimeWhenFree = _buf.ReadInt();
        GameModeArcadeEndlessChallengeReviveTimeWhenPay = _buf.ReadInt();
        GameModeArcadeEndlessChallengeCostWhenRevive = _buf.ReadInt();
        GameModeArcadeEndlessChallengeCostWhenStart = _buf.ReadInt();
        EventLogCameraPosHz = _buf.ReadFloat();
        PostInit();
    }

    public static GlobalSettingCfg DeserializeGlobalSettingCfg(ByteBuf _buf)
    {
        return new GlobalSettingCfg(_buf);
    }

    /// <summary>
    /// 测试描述11
    /// </summary>
    public int TestGlobalSetting1 { get; private set; }
    /// <summary>
    /// 测试描述21
    /// </summary>
    public int TestGlobalSetting2 { get; private set; }
    public string TestGlobalSetting3 { get; private set; }
    public System.Collections.Generic.List<string> TestGlobalSetting4 { get; private set; }
    /// <summary>
    /// AR模式新手指引关卡的cfgId
    /// </summary>
    public string ARTutorialFirstCfgId { get; private set; }
    public GamePlayBattleLevelCfg ARTutorialFirstCfgId_Ref { get; private set; }
    /// <summary>
    /// AR模式PVP的cfgId
    /// </summary>
    public string ARPVPCfgId { get; private set; }
    public GamePlayBattleLevelCfg ARPVPCfgId_Ref { get; private set; }
    /// <summary>
    /// AR模式PVE无尽模式的cfgId
    /// </summary>
    public string AREndlessChallengeCfgId { get; private set; }
    public GamePlayBattleLevelCfg AREndlessChallengeCfgId_Ref { get; private set; }
    /// <summary>
    /// 非AR模式PVP的cfgId
    /// </summary>
    public string NoARPVPCfgId { get; private set; }
    public GamePlayBattleLevelCfg NoARPVPCfgId_Ref { get; private set; }
    /// <summary>
    /// 非AR模式PVE无尽模式的cfgId
    /// </summary>
    public string NoAREndlessChallengeCfgId { get; private set; }
    public GamePlayBattleLevelCfg NoAREndlessChallengeCfgId_Ref { get; private set; }
    /// <summary>
    /// 是否显示伤害数字展示
    /// </summary>
    public bool ShowDamage { get; private set; }
    /// <summary>
    /// 是否显示金币获得展示
    /// </summary>
    public bool ShowGetGold { get; private set; }
    /// <summary>
    /// 玩家头像列表
    /// </summary>
    public System.Collections.Generic.List<string> AvatarIcons { get; private set; }
    public System.Collections.Generic.List<ResIconCfg> AvatarIcons_Ref { get; private set; }
    /// <summary>
    /// 背景图片列表
    /// </summary>
    public System.Collections.Generic.List<string> BGList { get; private set; }
    public System.Collections.Generic.List<ResIconCfg> BGList_Ref { get; private set; }
    /// <summary>
    /// 新手世界观信息
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> BeginnersGuideImgs { get; private set; }
    /// <summary>
    /// 初始体力值
    /// </summary>
    public int InitialPhysicalStrength { get; private set; }
    /// <summary>
    /// 体力值上限
    /// </summary>
    public int UpperLimitOfPhysicalStrength { get; private set; }
    /// <summary>
    /// 体力值恢复时长(秒)
    /// </summary>
    public int RecoverTimeOfPhysicalStrength { get; private set; }
    /// <summary>
    /// 体力值恢复增加量
    /// </summary>
    public int RecoverIncreaseOfPhysicalStrength { get; private set; }
    /// <summary>
    /// 看广告体力值恢复量
    /// </summary>
    public int RecoverIncreaseOfPhysicalStrengthByAd { get; private set; }
    /// <summary>
    /// AR模式PVE所需体力
    /// </summary>
    public int ARPVECfgTakePhsicalStrength { get; private set; }
    /// <summary>
    /// AR模式PVP所需体力
    /// </summary>
    public int ARPVPCfgTakePhsicalStrength { get; private set; }
    /// <summary>
    /// AR模式PVE无尽模式所需体力
    /// </summary>
    public int AREndlessChallengeTakePhsicalStrength { get; private set; }
    /// <summary>
    /// 体力系统是否显示
    /// </summary>
    public bool PhysicalStrengthShow { get; private set; }
    /// <summary>
    /// 两塔允许最近距离
    /// </summary>
    public float TowerDefenseNearTowerDis { get; private set; }
    /// <summary>
    /// 广告系统是否可用
    /// </summary>
    public bool AdmobAvailable { get; private set; }
    /// <summary>
    /// 复活时超时时间(秒)
    /// </summary>
    public int RecoverTimeoutTime { get; private set; }
    /// <summary>
    /// 复活时增加生命
    /// </summary>
    public int RecoverAddHp { get; private set; }
    /// <summary>
    /// 复活时增加金币
    /// </summary>
    public int RecoverAddGold { get; private set; }
    /// <summary>
    /// 初始背包物体
    /// </summary>
    public System.Collections.Generic.List<string> InitialBackpackItem { get; private set; }
    public System.Collections.Generic.List<ItemCfg> InitialBackpackItem_Ref { get; private set; }
    /// <summary>
    /// 需要重新评估游戏的时刻
    /// </summary>
    public long GameReJudgeTime { get; private set; }
    public long GameReJudgeTime_Millis => GameReJudgeTime * 1000L;
    /// <summary>
    /// 最多出战卡数
    /// </summary>
    public int MaxBattleCardNum { get; private set; }
    /// <summary>
    /// 最多出战技能数
    /// </summary>
    public int MaxBattleSkillNum { get; private set; }
    /// <summary>
    /// 赛季开始时间
    /// </summary>
    public long SeasonStartTime { get; private set; }
    public long SeasonStartTime_Millis => SeasonStartTime * 1000L;
    /// <summary>
    /// 单个赛季持续时间(天)
    /// </summary>
    public float SeasonDurationTime { get; private set; }
    /// <summary>
    /// (展示模式)初始背包物体
    /// </summary>
    public System.Collections.Generic.List<string> DemoShowInitialBackpackItem { get; private set; }
    public System.Collections.Generic.List<ItemCfg> DemoShowInitialBackpackItem_Ref { get; private set; }
    /// <summary>
    /// (街机模式)管理员密码
    /// </summary>
    public string GameModeArcadeMasterPassword { get; private set; }
    /// <summary>
    /// (街机模式)初始背包物体
    /// </summary>
    public System.Collections.Generic.List<string> GameModeArcadeInitialBackpackItem { get; private set; }
    public System.Collections.Generic.List<ItemCfg> GameModeArcadeInitialBackpackItem_Ref { get; private set; }
    /// <summary>
    /// (街机模式)超时时间(秒)
    /// </summary>
    public int GameModeArcadeSessionTimeOut { get; private set; }
    /// <summary>
    /// (街机模式)代币换算成money的系数
    /// </summary>
    public float GameModeArcadeCoin2Money { get; private set; }
    /// <summary>
    /// (街机模式)PVP的cfgId
    /// </summary>
    public string GameModeArcadeARPVPCfgId { get; private set; }
    public GamePlayBattleLevelCfg GameModeArcadeARPVPCfgId_Ref { get; private set; }
    /// <summary>
    /// (街机模式)PVE无尽模式的cfgId
    /// </summary>
    public string GameModeArcadeAREndlessChallengeCfgId { get; private set; }
    public GamePlayBattleLevelCfg GameModeArcadeAREndlessChallengeCfgId_Ref { get; private set; }
    /// <summary>
    /// (街机模式)非AR模式PVP的cfgId
    /// </summary>
    public string GameModeArcadeNoARPVPCfgId { get; private set; }
    public GamePlayBattleLevelCfg GameModeArcadeNoARPVPCfgId_Ref { get; private set; }
    /// <summary>
    /// (街机模式)非AR模式PVE无尽模式的cfgId
    /// </summary>
    public string GameModeArcadeNoAREndlessChallengeCfgId { get; private set; }
    public GamePlayBattleLevelCfg GameModeArcadeNoAREndlessChallengeCfgId_Ref { get; private set; }
    /// <summary>
    /// (街机模式)管理员扫描地形的cfgId
    /// </summary>
    public string GameModeArcadeARScanMeshCfgId { get; private set; }
    public GamePlayBattleLevelCfg GameModeArcadeARScanMeshCfgId_Ref { get; private set; }
    /// <summary>
    /// (街机模式)非AR管理员扫描地形的cfgId
    /// </summary>
    public string GameModeArcadeNoARScanMeshCfgId { get; private set; }
    public GamePlayBattleLevelCfg GameModeArcadeNoARScanMeshCfgId_Ref { get; private set; }
    /// <summary>
    /// (街机模式)复活时超时时间(秒)
    /// </summary>
    public int GameModeArcadeRecoverTimeoutTime { get; private set; }
    /// <summary>
    /// (街机模式)复活时增加生命
    /// </summary>
    public int GameModeArcadeRecoverAddHp { get; private set; }
    /// <summary>
    /// (街机模式)复活时增加金币
    /// </summary>
    public int GameModeArcadeRecoverAddGold { get; private set; }
    /// <summary>
    /// (街机模式)PVP免费的复活次数
    /// </summary>
    public int GameModeArcadePVPReviveTimeWhenFree { get; private set; }
    /// <summary>
    /// (街机模式)PVP付费的复活次数
    /// </summary>
    public int GameModeArcadePVPReviveTimeWhenPay { get; private set; }
    /// <summary>
    /// (街机模式)PVP复活需消耗代币
    /// </summary>
    public int GameModeArcadePVPCostWhenRevive { get; private set; }
    /// <summary>
    /// (街机模式)PVP开始战斗需消耗代币
    /// </summary>
    public int GameModeArcadePVPCostWhenStart { get; private set; }
    /// <summary>
    /// (街机模式)无尽模式免费的复活次数
    /// </summary>
    public int GameModeArcadeEndlessChallengeReviveTimeWhenFree { get; private set; }
    /// <summary>
    /// (街机模式)无尽模式付费的复活次数
    /// </summary>
    public int GameModeArcadeEndlessChallengeReviveTimeWhenPay { get; private set; }
    /// <summary>
    /// (街机模式)无尽模式复活需消耗代币
    /// </summary>
    public int GameModeArcadeEndlessChallengeCostWhenRevive { get; private set; }
    /// <summary>
    /// (街机模式)无尽模式开始战斗需消耗代币
    /// </summary>
    public int GameModeArcadeEndlessChallengeCostWhenStart { get; private set; }
    /// <summary>
    /// 上报相机位置的频率(秒)
    /// </summary>
    public float EventLogCameraPosHz { get; private set; }

    public const int __ID__ = -424096745;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.ARTutorialFirstCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(ARTutorialFirstCfgId);
        this.ARPVPCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(ARPVPCfgId);
        this.AREndlessChallengeCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(AREndlessChallengeCfgId);
        this.NoARPVPCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(NoARPVPCfgId);
        this.NoAREndlessChallengeCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(NoAREndlessChallengeCfgId);
        { ResIconCfgCategory __table = (ResIconCfgCategory)_tables["ResIconCfgCategory"]; this.AvatarIcons_Ref = new System.Collections.Generic.List<ResIconCfg>(); foreach(var __e in AvatarIcons) { this.AvatarIcons_Ref.Add(__table.GetOrDefault(__e)); } }
        { ResIconCfgCategory __table = (ResIconCfgCategory)_tables["ResIconCfgCategory"]; this.BGList_Ref = new System.Collections.Generic.List<ResIconCfg>(); foreach(var __e in BGList) { this.BGList_Ref.Add(__table.GetOrDefault(__e)); } }
        { ItemCfgCategory __table = (ItemCfgCategory)_tables["ItemCfgCategory"]; this.InitialBackpackItem_Ref = new System.Collections.Generic.List<ItemCfg>(); foreach(var __e in InitialBackpackItem) { this.InitialBackpackItem_Ref.Add(__table.GetOrDefault(__e)); } }
        { ItemCfgCategory __table = (ItemCfgCategory)_tables["ItemCfgCategory"]; this.DemoShowInitialBackpackItem_Ref = new System.Collections.Generic.List<ItemCfg>(); foreach(var __e in DemoShowInitialBackpackItem) { this.DemoShowInitialBackpackItem_Ref.Add(__table.GetOrDefault(__e)); } }
        { ItemCfgCategory __table = (ItemCfgCategory)_tables["ItemCfgCategory"]; this.GameModeArcadeInitialBackpackItem_Ref = new System.Collections.Generic.List<ItemCfg>(); foreach(var __e in GameModeArcadeInitialBackpackItem) { this.GameModeArcadeInitialBackpackItem_Ref.Add(__table.GetOrDefault(__e)); } }
        this.GameModeArcadeARPVPCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(GameModeArcadeARPVPCfgId);
        this.GameModeArcadeAREndlessChallengeCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(GameModeArcadeAREndlessChallengeCfgId);
        this.GameModeArcadeNoARPVPCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(GameModeArcadeNoARPVPCfgId);
        this.GameModeArcadeNoAREndlessChallengeCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(GameModeArcadeNoAREndlessChallengeCfgId);
        this.GameModeArcadeARScanMeshCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(GameModeArcadeARScanMeshCfgId);
        this.GameModeArcadeNoARScanMeshCfgId_Ref = (_tables["GamePlayBattleLevelCfgCategory"] as GamePlayBattleLevelCfgCategory).GetOrDefault(GameModeArcadeNoARScanMeshCfgId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "TestGlobalSetting1:" + TestGlobalSetting1 + ","
        + "TestGlobalSetting2:" + TestGlobalSetting2 + ","
        + "TestGlobalSetting3:" + TestGlobalSetting3 + ","
        + "TestGlobalSetting4:" + Bright.Common.StringUtil.CollectionToString(TestGlobalSetting4) + ","
        + "ARTutorialFirstCfgId:" + ARTutorialFirstCfgId + ","
        + "ARPVPCfgId:" + ARPVPCfgId + ","
        + "AREndlessChallengeCfgId:" + AREndlessChallengeCfgId + ","
        + "NoARPVPCfgId:" + NoARPVPCfgId + ","
        + "NoAREndlessChallengeCfgId:" + NoAREndlessChallengeCfgId + ","
        + "ShowDamage:" + ShowDamage + ","
        + "ShowGetGold:" + ShowGetGold + ","
        + "AvatarIcons:" + Bright.Common.StringUtil.CollectionToString(AvatarIcons) + ","
        + "BGList:" + Bright.Common.StringUtil.CollectionToString(BGList) + ","
        + "BeginnersGuideImgs:" + Bright.Common.StringUtil.CollectionToString(BeginnersGuideImgs) + ","
        + "InitialPhysicalStrength:" + InitialPhysicalStrength + ","
        + "UpperLimitOfPhysicalStrength:" + UpperLimitOfPhysicalStrength + ","
        + "RecoverTimeOfPhysicalStrength:" + RecoverTimeOfPhysicalStrength + ","
        + "RecoverIncreaseOfPhysicalStrength:" + RecoverIncreaseOfPhysicalStrength + ","
        + "RecoverIncreaseOfPhysicalStrengthByAd:" + RecoverIncreaseOfPhysicalStrengthByAd + ","
        + "ARPVECfgTakePhsicalStrength:" + ARPVECfgTakePhsicalStrength + ","
        + "ARPVPCfgTakePhsicalStrength:" + ARPVPCfgTakePhsicalStrength + ","
        + "AREndlessChallengeTakePhsicalStrength:" + AREndlessChallengeTakePhsicalStrength + ","
        + "PhysicalStrengthShow:" + PhysicalStrengthShow + ","
        + "TowerDefenseNearTowerDis:" + TowerDefenseNearTowerDis + ","
        + "AdmobAvailable:" + AdmobAvailable + ","
        + "RecoverTimeoutTime:" + RecoverTimeoutTime + ","
        + "RecoverAddHp:" + RecoverAddHp + ","
        + "RecoverAddGold:" + RecoverAddGold + ","
        + "InitialBackpackItem:" + Bright.Common.StringUtil.CollectionToString(InitialBackpackItem) + ","
        + "GameReJudgeTime:" + GameReJudgeTime + ","
        + "MaxBattleCardNum:" + MaxBattleCardNum + ","
        + "MaxBattleSkillNum:" + MaxBattleSkillNum + ","
        + "SeasonStartTime:" + SeasonStartTime + ","
        + "SeasonDurationTime:" + SeasonDurationTime + ","
        + "DemoShowInitialBackpackItem:" + Bright.Common.StringUtil.CollectionToString(DemoShowInitialBackpackItem) + ","
        + "GameModeArcadeMasterPassword:" + GameModeArcadeMasterPassword + ","
        + "GameModeArcadeInitialBackpackItem:" + Bright.Common.StringUtil.CollectionToString(GameModeArcadeInitialBackpackItem) + ","
        + "GameModeArcadeSessionTimeOut:" + GameModeArcadeSessionTimeOut + ","
        + "GameModeArcadeCoin2Money:" + GameModeArcadeCoin2Money + ","
        + "GameModeArcadeARPVPCfgId:" + GameModeArcadeARPVPCfgId + ","
        + "GameModeArcadeAREndlessChallengeCfgId:" + GameModeArcadeAREndlessChallengeCfgId + ","
        + "GameModeArcadeNoARPVPCfgId:" + GameModeArcadeNoARPVPCfgId + ","
        + "GameModeArcadeNoAREndlessChallengeCfgId:" + GameModeArcadeNoAREndlessChallengeCfgId + ","
        + "GameModeArcadeARScanMeshCfgId:" + GameModeArcadeARScanMeshCfgId + ","
        + "GameModeArcadeNoARScanMeshCfgId:" + GameModeArcadeNoARScanMeshCfgId + ","
        + "GameModeArcadeRecoverTimeoutTime:" + GameModeArcadeRecoverTimeoutTime + ","
        + "GameModeArcadeRecoverAddHp:" + GameModeArcadeRecoverAddHp + ","
        + "GameModeArcadeRecoverAddGold:" + GameModeArcadeRecoverAddGold + ","
        + "GameModeArcadePVPReviveTimeWhenFree:" + GameModeArcadePVPReviveTimeWhenFree + ","
        + "GameModeArcadePVPReviveTimeWhenPay:" + GameModeArcadePVPReviveTimeWhenPay + ","
        + "GameModeArcadePVPCostWhenRevive:" + GameModeArcadePVPCostWhenRevive + ","
        + "GameModeArcadePVPCostWhenStart:" + GameModeArcadePVPCostWhenStart + ","
        + "GameModeArcadeEndlessChallengeReviveTimeWhenFree:" + GameModeArcadeEndlessChallengeReviveTimeWhenFree + ","
        + "GameModeArcadeEndlessChallengeReviveTimeWhenPay:" + GameModeArcadeEndlessChallengeReviveTimeWhenPay + ","
        + "GameModeArcadeEndlessChallengeCostWhenRevive:" + GameModeArcadeEndlessChallengeCostWhenRevive + ","
        + "GameModeArcadeEndlessChallengeCostWhenStart:" + GameModeArcadeEndlessChallengeCostWhenStart + ","
        + "EventLogCameraPosHz:" + EventLogCameraPosHz + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}