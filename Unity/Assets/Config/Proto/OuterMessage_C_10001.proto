syntax = "proto3";
package ET;

message HttpGetRouterResponse
{
	repeated string Realms = 1;
	repeated string Routers = 2;
}

message RouterSync
{
	uint32 ConnectId = 1;
	string Address = 2;
}

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	string request = 2;
}

message M2C_TestResponse // IActorLocationResponse
{
    int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string response = 4;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 MapIndex = 2;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
	string GamePlayBattleLevelCfgId = 2;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message G2C_EnterBattleNotice // IActorMessage
{
	int32 RpcId = 1;
}

//ResponseType G2C_GetPlayerStatus
message C2G_GetPlayerStatus // IRequest
{
	int32 RpcId = 1;
}

message G2C_GetPlayerStatus // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes PlayerStatusComponentBytes = 4;
}

message G2C_PlayerStatusChgNotice // IActorMessage
{
	int32 RpcId = 1;
	bytes PlayerStatusComponentBytes = 2;
}

message G2C_LoginInAtOtherWhere // IActorMessage
{
	int32 RpcId = 1;
}

message MoveInfo
{
	repeated Unity.Mathematics.float3 Points = 1;
	Unity.Mathematics.quaternion Rotation = 2;
	int32 TurnSpeed = 3;
}

message UnitInfo
{
	int64 UnitId = 1;
	string ConfigId = 2;
	int32 Level = 3;
	int32 Type = 4;
	Unity.Mathematics.float3 Position = 5;
	Unity.Mathematics.float3 Forward = 6;
	map<int32, int64> KV = 7;
	MoveInfo MoveInfo = 8;
	repeated bytes Components = 9;
	repeated bytes EffectComponents = 10;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 1;
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 1;
}

message M2C_SyncDataList // IActorMessage
{
	repeated bytes SyncDataList = 1;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message C2M_NeedReNoticeUnitIds // IActorLocationMessage
{
	int32 RpcId = 1;
	repeated int64 UnitIds = 2;
}

message C2M_NeedReNoticeTowerDefense // IActorLocationMessage
{
	int32 RpcId = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 1;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;
	Unity.Mathematics.float3 Position = 2;
	repeated Unity.Mathematics.float3 Points = 3;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;
	int64 Id = 2;
	Unity.Mathematics.float3 Position = 3;
	Unity.Mathematics.quaternion Rotation = 4;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 1;
	int32 Fps = 2;
	int64 PingTime = 3;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Time = 4;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 1;
	string Account = 2;  // 帐号
	string Password = 3;  // 密码
	int32 LoginType = 4;
}

message R2C_Login // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string Address = 4;
	int64 Key = 5;
	int64 GateId = 6;
	int32 IsFirstLogin = 7;
}

//ResponseType R2C_LoginWithAuth
message C2R_LoginWithAuth // IRequest
{
	int32 RpcId = 1;
	string Account = 2;  // 帐号
	string Password = 3;  // 密码
	int32 LoginType = 4;
	string Name = 5;
	string Token = 6;
}

message R2C_LoginWithAuth // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string Address = 4;
	int64 Key = 5;
	int64 GateId = 6;
	int32 IsFirstLogin = 7;
}

//ResponseType G2C_BindAccountWithAuth
message C2G_BindAccountWithAuth // IRequest
{
	int32 RpcId = 1;
	string Account = 2;  // 帐号
	string BindAccount = 3;  // 第三方账号
	int32 LoginType = 4;
	string Name = 5;
	string Token = 6;
}

message G2C_BindAccountWithAuth // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 IsBindSuccess = 4;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 1;
	int64 Key = 2;  // 帐号
	int64 GateId = 3;
	int32 IsFirstLogin = 4;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 PlayerId = 4;
	bytes PlayerComponentBytes = 5;
	bytes PlayerStatusComponentBytes = 6;
}

//ResponseType G2C_LoginOut
message C2G_LoginOut // IRequest
{
	int32 RpcId = 1;
}

message G2C_LoginOut // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ReLoginGate
message C2G_ReLoginGate // IRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
}

message G2C_ReLoginGate // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 N = 4;
}

message C2M_TestRobotCase2 // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase2 // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_Benchmark
message C2G_Benchmark // IRequest
{
	int32 RpcId = 1;
}

message G2C_Benchmark // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_LearnSkill
message C2M_LearnSkill // IActorLocationRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
	int64 unitId = 3;
}

message M2C_LearnSkill // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_CastSkill
message C2M_CastSkill // IActorLocationRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
	int64 unitId = 3;
	Unity.Mathematics.float3 CameraPosition = 4;
	Unity.Mathematics.float3 CameraDirect = 5;
	bytes SelectHandleBytes = 6;
}

message M2C_CastSkill // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_BuySkillEnergy
message C2M_BuySkillEnergy // IActorLocationRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
	int64 unitId = 3;
}

message M2C_BuySkillEnergy // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_RestoreSkillEnergy
message C2M_RestoreSkillEnergy // IActorLocationRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
	int64 unitId = 3;
}

message M2C_RestoreSkillEnergy // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_LearnPlayerSkill
message C2G_LearnPlayerSkill // IRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
}

message G2C_LearnPlayerSkill // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_UpdatePlayerSkill
message C2G_UpdatePlayerSkill // IRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
}

message G2C_UpdatePlayerSkill // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ReplacePlayerSkill
message C2G_ReplacePlayerSkill // IRequest
{
	int32 RpcId = 1;
	string SkillCfgId = 2;
	int32 Index = 3;
}

message G2C_ReplacePlayerSkill // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_CallTower
message C2M_CallTower // IActorLocationRequest
{
	int32 RpcId = 1;
	string TowerUnitCfgId = 2;
	Unity.Mathematics.float3 Position = 3;
	string CreateActionIds = 4;
}

message M2C_CallTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_CallMonster
message C2M_CallMonster // IActorLocationRequest
{
	int32 RpcId = 1;
	string MonsterUnitCfgId = 2;
	Unity.Mathematics.float3 Position = 3;
	int32 Count = 4;
	string CreateActionIds = 5;
}

message M2C_CallMonster // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_PKMovePlayer
message C2M_PKMovePlayer // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_PKMovePlayer // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_PKMoveTower
message C2M_PKMoveTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_PKMoveTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ClearMyTower
message C2M_ClearMyTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
}

message M2C_ClearMyTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ClearAllMonster
message C2M_ClearAllMonster // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_ClearAllMonster // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_GetRoomList
message C2G_GetRoomList // IRequest
{
	int32 RpcId = 1;
	int32 NeedARRoom = 2;
	int32 NeedNotARRoom = 3;
}

message G2C_GetRoomList // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	repeated bytes RoomInfos = 4;
}

//ResponseType G2C_GetRoomInfo
message C2G_GetRoomInfo // IRequest
{
	int32 RpcId = 1;
	int64 RoomId = 2;
}

message G2C_GetRoomInfo // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes RoomInfo = 4;
	repeated bytes RoomMemberInfos = 5;
}

message R2C_RoomInfoChgNotice // IActorMessage
{
	int32 RpcId = 1;
}

//ResponseType G2C_CreateRoom
message C2G_CreateRoom // IRequest
{
	int32 RpcId = 1;
	bytes RoomTypeInfo = 2;
}

message G2C_CreateRoom // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 RoomId = 4;
}

//ResponseType G2C_JoinRoom
message C2G_JoinRoom // IRequest
{
	int32 RpcId = 1;
	int64 RoomId = 2;
}

message G2C_JoinRoom // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_QuitRoom
message C2G_QuitRoom // IRequest
{
	int32 RpcId = 1;
}

message G2C_QuitRoom // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_KickMemberOutRoom
message C2G_KickMemberOutRoom // IRequest
{
	int32 RpcId = 1;
	int64 BeKickPlayerId = 2;
}

message G2C_KickMemberOutRoom // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message G2C_BeKickMemberOutRoom // IActorMessage
{
	int32 RpcId = 1;
	int32 IsKickWhenBattle = 2;
}

//ResponseType G2C_ChgRoomMemberStatus
message C2G_ChgRoomMemberStatus // IRequest
{
	int32 RpcId = 1;
	int32 IsReady = 2;
}

message G2C_ChgRoomMemberStatus // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 IsReady = 4;
}

//ResponseType G2C_ChgRoomMemberSeat
message C2G_ChgRoomMemberSeat // IRequest
{
	int32 RpcId = 1;
	int32 NewSeat = 2;
}

message G2C_ChgRoomMemberSeat // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ChgRoomMemberTeam
message C2G_ChgRoomMemberTeam // IRequest
{
	int32 RpcId = 1;
	int32 NewTeam = 2;
}

message G2C_ChgRoomMemberTeam // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_SetARRoomInfo
message C2G_SetARRoomInfo // IRequest
{
	int32 RpcId = 1;
	int32 ARMapScale = 2;
	int32 ARMeshType = 3;
	string ARSceneId = 4;
	string ARMeshDownLoadUrl = 5;
	bytes ARMeshBytes = 6;
}

message G2C_SetARRoomInfo // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ChgRoomBattleLevelCfg
message C2G_ChgRoomBattleLevelCfg // IRequest
{
	int32 RpcId = 1;
	bytes RoomTypeInfo = 2;
}

message G2C_ChgRoomBattleLevelCfg // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ReturnBackBattle
message C2G_ReturnBackBattle // IRequest
{
	int32 RpcId = 1;
}

message G2C_ReturnBackBattle // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_MemberQuitBattle
message C2M_MemberQuitBattle // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_MemberQuitBattle // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_MemberReturnRoomFromBattle
message C2M_MemberReturnRoomFromBattle // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_MemberReturnRoomFromBattle // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message M2C_GamePlayChgNotice // IActorMessage
{
	int32 RpcId = 1;
	bytes GamePlayInfo = 2;
	repeated bytes Components = 3;
}

message M2C_GamePlayCoinChgNotice // IActorMessage
{
	int32 RpcId = 1;
	int32 GetCoinType = 2;
	bytes GamePlayPlayerListComponent = 3;
}

message M2C_GamePlayStatisticalDataChgNotice // IActorMessage
{
	int32 RpcId = 1;
	bytes GamePlayStatisticalDataComponent = 2;
}

message M2C_GamePlayModeChgNotice // IActorMessage
{
	int32 RpcId = 1;
	bytes GamePlayModeInfo = 2;
	repeated bytes Components = 3;
	map<int32, int32> CoinKV = 4;
}

//ResponseType M2C_PutHome
message C2M_PutHome // IActorLocationRequest
{
	int32 RpcId = 1;
	string UnitCfgId = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_PutHome // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ResetHome
message C2M_ResetHome // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_ResetHome // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_PutMonsterCall
message C2M_PutMonsterCall // IActorLocationRequest
{
	int32 RpcId = 1;
	string UnitCfgId = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_PutMonsterCall // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_BuyPlayerTower
message C2M_BuyPlayerTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 Index = 2;
}

message M2C_BuyPlayerTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_RefreshBuyPlayerTower
message C2M_RefreshBuyPlayerTower // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_RefreshBuyPlayerTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_CallOwnTower
message C2M_CallOwnTower // IActorLocationRequest
{
	int32 RpcId = 1;
	string TowerUnitCfgId = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_CallOwnTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_UpgradePlayerTower
message C2M_UpgradePlayerTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
	string TowerCfgId = 3;
	int32 OnlyChkPool = 4;
}

message M2C_UpgradePlayerTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ScalePlayerTower
message C2M_ScalePlayerTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
}

message M2C_ScalePlayerTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ScalePlayerTowerCard
message C2M_ScalePlayerTowerCard // IActorLocationRequest
{
	int32 RpcId = 1;
	string TowerCfgId = 2;
}

message M2C_ScalePlayerTowerCard // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ReclaimPlayerTower
message C2M_ReclaimPlayerTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
}

message M2C_ReclaimPlayerTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_MovePlayerTower
message C2M_MovePlayerTower // IActorLocationRequest
{
	int32 RpcId = 1;
	int64 TowerUnitId = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_MovePlayerTower // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ReadyWhenRestTime
message C2M_ReadyWhenRestTime // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_ReadyWhenRestTime // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_ReScan
message C2M_ReScan // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_ReScan // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_GetMonsterCall2HeadQuarterPath
message C2M_GetMonsterCall2HeadQuarterPath // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 HomeTeamFlagType = 2;
	Unity.Mathematics.float3 Position = 3;
}

message M2C_GetMonsterCall2HeadQuarterPath // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	Unity.Mathematics.float3 Position = 4;
	repeated Unity.Mathematics.float3 Points = 5;
}

//ResponseType M2C_GetNavMeshFromHeadQuarter
message C2M_GetNavMeshFromHeadQuarter // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 HomeTeamFlagType = 2;
}

message M2C_GetNavMeshFromHeadQuarter // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	repeated Unity.Mathematics.float3 Vertices = 4;
	repeated int32 Indices = 5;
}

//ResponseType M2C_ChkRay
message C2M_ChkRay // IActorLocationRequest
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 StartPosition = 2;
	Unity.Mathematics.float3 EndPosition = 3;
}

message M2C_ChkRay // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 HitRet = 4;
	Unity.Mathematics.float3 HitPosition = 5;
}

message C2M_SendARCameraPos // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 ARCameraPosition = 2;
	Unity.Mathematics.float3 ARCameraHitPosition = 3;
}

message C2M_GetNumericUnit // IActorLocationMessage
{
	int32 RpcId = 1;
	repeated int64 UnitIdList = 2;
	repeated int32 NumericKeyList = 3;
}

//ResponseType G2C_GetRank
message C2G_GetRank // IRequest
{
	int32 RpcId = 1;
	int32 RankType = 2;
}

message G2C_GetRank // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes RankShowComponentBytes = 4;
}

//ResponseType G2C_GetRankedMoreThan
message C2G_GetRankedMoreThan // IRequest
{
	int32 RpcId = 1;
	int32 RankType = 2;
	int64 Score = 3;
}

message G2C_GetRankedMoreThan // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Rank = 4;
	int32 RankedMoreThan = 5;
}

//ResponseType G2C_GetPlayerCache
message C2G_GetPlayerCache // IRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 PlayerModelType = 3;
}

message G2C_GetPlayerCache // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes PlayerModelComponentBytes = 4;
}

message G2C_PlayerCacheChgNotice // IActorMessage
{
	int32 RpcId = 1;
	int32 PlayerModelType = 2;
}

//ResponseType G2C_SetPlayerCache
message C2G_SetPlayerCache // IRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 PlayerModelType = 3;
	bytes PlayerModelComponentBytes = 4;
	repeated string SetPlayerKeys = 5;
}

message G2C_SetPlayerCache // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_AddPhysicalStrenthByAd
message C2G_AddPhysicalStrenthByAd // IRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
}

message G2C_AddPhysicalStrenthByAd // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_BattleRecoverCancelWatchAd
message C2M_BattleRecoverCancelWatchAd // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 IsFinished = 2;
}

message M2C_BattleRecoverCancelWatchAd // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_BattleRecoverConfirmWatchAd
message C2M_BattleRecoverConfirmWatchAd // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 IsFinished = 2;
}

message M2C_BattleRecoverConfirmWatchAd // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2C_BattleRecoverResult
message C2M_BattleRecoverResult // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 IsConfirm = 2;
}

message M2C_BattleRecoverResult // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ChkGameJudgeChoose
message C2G_ChkGameJudgeChoose // IRequest
{
	int32 RpcId = 1;
}

message G2C_ChkGameJudgeChoose // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 IsNeed = 4;
}

//ResponseType G2C_RecordGameJudgeChoose
message C2G_RecordGameJudgeChoose // IRequest
{
	int32 RpcId = 1;
	int32 GameJudgeChooseType = 2;
	string ComplainMsg = 3;
}

message G2C_RecordGameJudgeChoose // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message C2G_ReDealMyFunctionMenu // IMessage
{
	int32 RpcId = 1;
}

message C2M_SetStopActorMoveWhenDebug // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 IsStopActorMove = 2;
}

message C2M_ForceGameEndWhenDebug // IActorLocationMessage
{
	int32 RpcId = 1;
}

message C2M_ForceAddGameGoldWhenDebug // IActorLocationMessage
{
	int32 RpcId = 1;
}

message C2M_ForceAddHomeHpWhenDebug // IActorLocationMessage
{
	int32 RpcId = 1;
}

message C2G_SetMyRankScoreWhenDebug // IMessage
{
	int32 RpcId = 1;
	int32 RankType = 2;
	int32 Score = 3;
	int32 KillNum = 4;
}

message C2G_ClearRankWhenDebug // IMessage
{
	int32 RpcId = 1;
	int32 RankType = 2;
}

message C2G_ClearPlayerRankWhenDebug // IMessage
{
	int32 RpcId = 1;
	int32 RankType = 2;
	int64 PlayerId = 3;
}

message C2G_ResetPlayerFunctionMenuStatusWhenDebug // IMessage
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
	int32 OperateType = 3;
	string FunctionMenuCfgIds = 4;
}

//ResponseType G2C_GetArcadeCoinQrCode
message C2G_GetArcadeCoinQrCode // IRequest
{
	int32 RpcId = 1;
	int32 ArcadeCoinNum = 2;
}

message G2C_GetArcadeCoinQrCode // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes PayComponentBytes = 4;
}

//ResponseType G2C_GetSeasonComponent
message C2G_GetSeasonComponent // IRequest
{
	int32 RpcId = 1;
}

message G2C_GetSeasonComponent // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes ComponentBytes = 4;
}

message C2G_InsertMailWhenDebug // IMessage
{
	int32 RpcId = 1;
}

message C2G_AddDiamondWhenDebug // IMessage
{
	int32 RpcId = 1;
}

//ResponseType G2C_DealMyMail
message C2G_DealMyMail // IRequest
{
	int32 RpcId = 1;
	int64 MailId = 2;
	int32 DealMailType = 3;
}

message G2C_DealMyMail // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_ResetPowerup
message C2G_ResetPowerup  // IRequest
{
	int32 RpcId = 1;
}

message G2C_ResetPowerup // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_UpdatePowerup
message C2G_UpdatePowerup  // IRequest
{
	int32 RpcId = 1;
    string PowerUpcfg = 2;
}

message G2C_UpdatePowerup // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_SetUIRedDotType
message C2G_SetUIRedDotType  // IRequest
{
	int32 RpcId = 1;
    int32 UIRedDotType = 2;
	string ItemCfgId = 3;
	string SkillCfgId = 4;
}

message G2C_SetUIRedDotType // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message C2G_ChkSeasonIndexChg // IMessage
{
	int32 RpcId = 1;
}

//ResponseType G2C_SetQuestionnaireFinished
message C2G_SetQuestionnaireFinished  // IRequest
{
	int32 RpcId = 1;
    string QuestionnaireCfgId = 2;
}

message G2C_SetQuestionnaireFinished // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_SetBattleNoticeFinished
message C2G_SetBattleNoticeFinished  // IRequest
{
	int32 RpcId = 1;
    string BattleNoticeCfgId = 2;
}

message G2C_SetBattleNoticeFinished // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}