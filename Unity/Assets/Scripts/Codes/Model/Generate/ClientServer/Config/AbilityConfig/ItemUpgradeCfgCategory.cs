//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;

namespace ET.AbilityConfig
{
   
/// <summary>
/// 物品升级表
/// </summary>
[Config]
public partial class ItemUpgradeCfgCategory: ConfigSingleton<ItemUpgradeCfgCategory>
{
    private readonly List<ItemUpgradeCfg> _dataList;

    private Dictionary<(string, int), ItemUpgradeCfg> _dataMapUnion;

    public ItemUpgradeCfgCategory(ByteBuf _buf)
    {
        _dataList = new List<ItemUpgradeCfg>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            ItemUpgradeCfg _v;
            _v = ItemUpgradeCfg.DeserializeItemUpgradeCfg(_buf);
            _dataList.Add(_v);
        }
        _dataMapUnion = new Dictionary<(string, int), ItemUpgradeCfg>();
        foreach(var _v in _dataList)
        {
            _dataMapUnion.Add((_v.ItemCfgId, _v.Level), _v);
        }
        PostInit();
    }

    public List<ItemUpgradeCfg> DataList => _dataList;

    public ItemUpgradeCfg Get(string itemCfgId, int level) => _dataMapUnion.TryGetValue((itemCfgId, level), out ItemUpgradeCfg __v) ? __v : null;

    public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var v in _dataList)
        {
            v.Resolve(_tables);
        }
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var v in _dataList)
        {
            v.TranslateText(translator);
        }
    }
    
    public override void TrimExcess()
    {
        _dataList.TrimExcess();
    }
        
    
    public override string ConfigName()
    {
        return typeof(ItemUpgradeCfg).Name;
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}