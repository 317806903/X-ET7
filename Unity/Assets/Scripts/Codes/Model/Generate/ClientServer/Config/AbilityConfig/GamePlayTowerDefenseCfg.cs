//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class GamePlayTowerDefenseCfg: Bright.Config.BeanBase
{
    public GamePlayTowerDefenseCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        IsNeedPutHomeAndMonsterCall = _buf.ReadBool();
        IncreaseGold = TowerDefenseIncreaseGold.DeserializeTowerDefenseIncreaseGold(_buf);
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);PlayerInitCards = new System.Collections.Generic.Dictionary<string, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { string _k0;  _k0 = _buf.ReadString(); int _v0;  _v0 = _buf.ReadInt();     PlayerInitCards.Add(_k0, _v0);}}
        InterestOnDeposit = _buf.ReadInt();
        InterestOnDepositMaxValue = _buf.ReadInt();
        LimitTowerCount = _buf.ReadInt();
        RefreshBuyTowerCost = _buf.ReadInt();
        IsAutoRefreshBuyTower = _buf.ReadBool();
        BuyTowerPoolCount = _buf.ReadInt();
        HomeLife = _buf.ReadInt();
        GameInstructions_l10n_key = _buf.ReadString(); GameInstructions = _buf.ReadString();
        BuyTowerRefreshRuleCfgId = _buf.ReadString();
        MonsterWaveCallRule = TowerDefenseBattleMonsterWaveCall.DeserializeTowerDefenseBattleMonsterWaveCall(_buf);
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);CameraPlayerUnitCreateActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); CameraPlayerUnitCreateActionIds.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);PlayerUnitCreateActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); PlayerUnitCreateActionIds.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);TowerCreateActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); TowerCreateActionIds.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MonsterWaveCallCreateActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); MonsterWaveCallCreateActionIds.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);GlobalBuffAddList = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); GlobalBuffAddList.Add(_e0);}}
        PostInit();
    }

    public static GamePlayTowerDefenseCfg DeserializeGamePlayTowerDefenseCfg(ByteBuf _buf)
    {
        return new GamePlayTowerDefenseCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 是否需要手动放置大本营和出怪点
    /// </summary>
    public bool IsNeedPutHomeAndMonsterCall { get; private set; }
    public TowerDefenseIncreaseGold IncreaseGold { get; private set; }
    /// <summary>
    /// 玩家初始卡牌
    /// </summary>
    public System.Collections.Generic.Dictionary<string, int> PlayerInitCards { get; private set; }
    /// <summary>
    /// 波次结束结算存款利息(%)
    /// </summary>
    public int InterestOnDeposit { get; private set; }
    /// <summary>
    /// 波次结束结算存款利息最大值
    /// </summary>
    public int InterestOnDepositMaxValue { get; private set; }
    /// <summary>
    /// 每人最多允许建造塔数
    /// </summary>
    public int LimitTowerCount { get; private set; }
    /// <summary>
    /// 玩家刷新可购买塔的费用
    /// </summary>
    public int RefreshBuyTowerCost { get; private set; }
    /// <summary>
    /// 是否每回合自动刷新玩家刷新可购买塔
    /// </summary>
    public bool IsAutoRefreshBuyTower { get; private set; }
    /// <summary>
    /// 可购买塔展示数量
    /// </summary>
    public int BuyTowerPoolCount { get; private set; }
    /// <summary>
    /// 大本营血量
    /// </summary>
    public int HomeLife { get; private set; }
    /// <summary>
    /// 游戏介绍
    /// </summary>
    public string GameInstructions { get; private set; }
    public string GameInstructions_l10n_key { get; }
    /// <summary>
    /// 可购买塔刷新规则
    /// </summary>
    public string BuyTowerRefreshRuleCfgId { get; private set; }
    public TowerDefense_BuyTowerRefreshRuleCfg BuyTowerRefreshRuleCfgId_Ref { get; private set; }
    public TowerDefenseBattleMonsterWaveCall MonsterWaveCallRule { get; private set; }
    /// <summary>
    /// cameraPlayer生成时Action事件id（对应ActionConfig文件夹下表格）
    /// </summary>
    public System.Collections.Generic.List<string> CameraPlayerUnitCreateActionIds { get; private set; }
    /// <summary>
    /// player生成时Action事件id（对应ActionConfig文件夹下表格）
    /// </summary>
    public System.Collections.Generic.List<string> PlayerUnitCreateActionIds { get; private set; }
    /// <summary>
    /// 塔生成时Action事件id（对应ActionConfig文件夹下表格）
    /// </summary>
    public System.Collections.Generic.List<string> TowerCreateActionIds { get; private set; }
    /// <summary>
    /// 怪生成时Action事件id（对应ActionConfig文件夹下表格）
    /// </summary>
    public System.Collections.Generic.List<string> MonsterWaveCallCreateActionIds { get; private set; }
    /// <summary>
    /// 效果列表
    /// </summary>
    public System.Collections.Generic.List<string> GlobalBuffAddList { get; private set; }
    public System.Collections.Generic.List<ActionCfg_GlobalBuffAdd> GlobalBuffAddList_Ref { get; private set; }

    public const int __ID__ = -1245243737;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        IncreaseGold?.Resolve(_tables);
        this.BuyTowerRefreshRuleCfgId_Ref = (_tables["TowerDefense_BuyTowerRefreshRuleCfgCategory"] as TowerDefense_BuyTowerRefreshRuleCfgCategory).GetOrDefault(BuyTowerRefreshRuleCfgId);
        MonsterWaveCallRule?.Resolve(_tables);
        { ActionCfg_GlobalBuffAddCategory __table = (ActionCfg_GlobalBuffAddCategory)_tables["ActionCfg_GlobalBuffAddCategory"]; this.GlobalBuffAddList_Ref = new System.Collections.Generic.List<ActionCfg_GlobalBuffAdd>(); foreach(var __e in GlobalBuffAddList) { this.GlobalBuffAddList_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        IncreaseGold?.TranslateText(translator);
        GameInstructions = translator(GameInstructions_l10n_key, GameInstructions);
        MonsterWaveCallRule?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "IsNeedPutHomeAndMonsterCall:" + IsNeedPutHomeAndMonsterCall + ","
        + "IncreaseGold:" + IncreaseGold + ","
        + "PlayerInitCards:" + Bright.Common.StringUtil.CollectionToString(PlayerInitCards) + ","
        + "InterestOnDeposit:" + InterestOnDeposit + ","
        + "InterestOnDepositMaxValue:" + InterestOnDepositMaxValue + ","
        + "LimitTowerCount:" + LimitTowerCount + ","
        + "RefreshBuyTowerCost:" + RefreshBuyTowerCost + ","
        + "IsAutoRefreshBuyTower:" + IsAutoRefreshBuyTower + ","
        + "BuyTowerPoolCount:" + BuyTowerPoolCount + ","
        + "HomeLife:" + HomeLife + ","
        + "GameInstructions:" + GameInstructions + ","
        + "BuyTowerRefreshRuleCfgId:" + BuyTowerRefreshRuleCfgId + ","
        + "MonsterWaveCallRule:" + MonsterWaveCallRule + ","
        + "CameraPlayerUnitCreateActionIds:" + Bright.Common.StringUtil.CollectionToString(CameraPlayerUnitCreateActionIds) + ","
        + "PlayerUnitCreateActionIds:" + Bright.Common.StringUtil.CollectionToString(PlayerUnitCreateActionIds) + ","
        + "TowerCreateActionIds:" + Bright.Common.StringUtil.CollectionToString(TowerCreateActionIds) + ","
        + "MonsterWaveCallCreateActionIds:" + Bright.Common.StringUtil.CollectionToString(MonsterWaveCallCreateActionIds) + ","
        + "GlobalBuffAddList:" + Bright.Common.StringUtil.CollectionToString(GlobalBuffAddList) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}