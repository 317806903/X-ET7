//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

/// <summary>
/// 塔防(无尽出怪模式)
/// </summary>
public sealed partial class GamePlayTowerDefenseEndlessChallengeMonster:  GamePlayTowerDefenseBase 
{
    public GamePlayTowerDefenseEndlessChallengeMonster(ByteBuf _buf)  : base(_buf) 
    {
        RepeatNum = _buf.ReadInt();
        MonsterWaveNumScalePercentCoefficient = _buf.ReadFloat();
        MonsterWaveLevelScalePercentCoefficient = _buf.ReadFloat();
        WaveRewardGoldScalePercentCoefficient = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);CreateActionIds = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); CreateActionIds.Add(_e0);}}
        PostInit();
    }

    public static GamePlayTowerDefenseEndlessChallengeMonster DeserializeGamePlayTowerDefenseEndlessChallengeMonster(ByteBuf _buf)
    {
        return new GamePlayTowerDefenseEndlessChallengeMonster(_buf);
    }

    /// <summary>
    /// 使用最后N关进行轮询
    /// </summary>
    public int RepeatNum { get; private set; }
    /// <summary>
    /// 每重复最后关卡时刷怪数量增加x%
    /// </summary>
    public float MonsterWaveNumScalePercentCoefficient { get; private set; }
    /// <summary>
    /// 每重复最后关卡时刷怪等级增加y%
    /// </summary>
    public float MonsterWaveLevelScalePercentCoefficient { get; private set; }
    /// <summary>
    /// 每重复最后关卡时关卡奖励增加y%
    /// </summary>
    public float WaveRewardGoldScalePercentCoefficient { get; private set; }
    /// <summary>
    /// 生成时Action事件id
    /// </summary>
    public System.Collections.Generic.List<string> CreateActionIds { get; private set; }

    public const int __ID__ = 1978480078;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "GamePlayModeCfgId:" + GamePlayModeCfgId + ","
        + "RepeatNum:" + RepeatNum + ","
        + "MonsterWaveNumScalePercentCoefficient:" + MonsterWaveNumScalePercentCoefficient + ","
        + "MonsterWaveLevelScalePercentCoefficient:" + MonsterWaveLevelScalePercentCoefficient + ","
        + "WaveRewardGoldScalePercentCoefficient:" + WaveRewardGoldScalePercentCoefficient + ","
        + "CreateActionIds:" + Bright.Common.StringUtil.CollectionToString(CreateActionIds) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}