//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

/// <summary>
/// unitCfgId
/// </summary>
public sealed partial class TowerToUnitCfgId:  TowerToUnitBase 
{
    public TowerToUnitCfgId(ByteBuf _buf)  : base(_buf) 
    {
        CfgId = _buf.ReadString();
        Level = _buf.ReadInt();
        PostInit();
    }

    public static TowerToUnitCfgId DeserializeTowerToUnitCfgId(ByteBuf _buf)
    {
        return new TowerToUnitCfgId(_buf);
    }

    /// <summary>
    /// unitId
    /// </summary>
    public string CfgId { get; private set; }
    public UnitCfg CfgId_Ref { get; private set; }
    /// <summary>
    /// 等级
    /// </summary>
    public int Level { get; private set; }

    public const int __ID__ = -1618793833;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        base.Resolve(_tables);
        this.CfgId_Ref = (_tables["UnitCfgCategory"] as UnitCfgCategory).GetOrDefault(CfgId);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "CfgId:" + CfgId + ","
        + "Level:" + Level + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}