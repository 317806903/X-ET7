//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class UnitCfg: Bright.Config.BeanBase
{
    public UnitCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        ResId = _buf.ReadString();
        MoveSpeed = _buf.ReadFloat();
        RotationSpeed = _buf.ReadFloat();
        IsNeedChkMesh = _buf.ReadBool();
        AttackPointHeight = _buf.ReadFloat();
        BodyHeight = _buf.ReadFloat();
        BodyRadius = _buf.ReadFloat();
        ResScale = _buf.ReadFloat();
        PropertyType = _buf.ReadString();
        DeathShow = _buf.ReadString();
        IdleTimelineId = _buf.ReadString();
        MoveTimelineId = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SkillList = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); SkillList.Add(_e0);}}
        PostInit();
    }

    public static UnitCfg DeserializeUnitCfg(ByteBuf _buf)
    {
        return new UnitCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 资源路径
    /// </summary>
    public string ResId { get; private set; }
    public ResUnitCfg ResId_Ref { get; private set; }
    /// <summary>
    /// 移动速度
    /// </summary>
    public float MoveSpeed { get; private set; }
    /// <summary>
    /// 转身速度
    /// </summary>
    public float RotationSpeed { get; private set; }
    /// <summary>
    /// 是否需要检测Mesh(判断攻击目标时)
    /// </summary>
    public bool IsNeedChkMesh { get; private set; }
    /// <summary>
    /// 攻击点高度(判断连通时会不会被阻挡)
    /// </summary>
    public float AttackPointHeight { get; private set; }
    /// <summary>
    /// 身体高度(判断位置，判断伤害什么的)
    /// </summary>
    public float BodyHeight { get; private set; }
    /// <summary>
    /// 身体半径(判断伤害什么的)
    /// </summary>
    public float BodyRadius { get; private set; }
    /// <summary>
    /// 资源大小缩放
    /// </summary>
    public float ResScale { get; private set; }
    /// <summary>
    /// 属性类型
    /// </summary>
    public string PropertyType { get; private set; }
    /// <summary>
    /// 死亡表现
    /// </summary>
    public string DeathShow { get; private set; }
    public ActionCfg_DeathShow DeathShow_Ref { get; private set; }
    /// <summary>
    /// Idle行为
    /// </summary>
    public string IdleTimelineId { get; private set; }
    public TimelineCfg IdleTimelineId_Ref { get; private set; }
    /// <summary>
    /// Move行为
    /// </summary>
    public string MoveTimelineId { get; private set; }
    public TimelineCfg MoveTimelineId_Ref { get; private set; }
    /// <summary>
    /// 拥有技能列表
    /// </summary>
    public System.Collections.Generic.List<string> SkillList { get; private set; }
    public System.Collections.Generic.List<SkillCfg> SkillList_Ref { get; private set; }

    public const int __ID__ = 1378101280;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.ResId_Ref = (_tables["ResUnitCfgCategory"] as ResUnitCfgCategory).GetOrDefault(ResId);
        this.DeathShow_Ref = (_tables["ActionCfg_DeathShowCategory"] as ActionCfg_DeathShowCategory).GetOrDefault(DeathShow);
        this.IdleTimelineId_Ref = (_tables["TimelineCfgCategory"] as TimelineCfgCategory).GetOrDefault(IdleTimelineId);
        this.MoveTimelineId_Ref = (_tables["TimelineCfgCategory"] as TimelineCfgCategory).GetOrDefault(MoveTimelineId);
        { SkillCfgCategory __table = (SkillCfgCategory)_tables["SkillCfgCategory"]; this.SkillList_Ref = new System.Collections.Generic.List<SkillCfg>(); foreach(var __e in SkillList) { this.SkillList_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ResId:" + ResId + ","
        + "MoveSpeed:" + MoveSpeed + ","
        + "RotationSpeed:" + RotationSpeed + ","
        + "IsNeedChkMesh:" + IsNeedChkMesh + ","
        + "AttackPointHeight:" + AttackPointHeight + ","
        + "BodyHeight:" + BodyHeight + ","
        + "BodyRadius:" + BodyRadius + ","
        + "ResScale:" + ResScale + ","
        + "PropertyType:" + PropertyType + ","
        + "DeathShow:" + DeathShow + ","
        + "IdleTimelineId:" + IdleTimelineId + ","
        + "MoveTimelineId:" + MoveTimelineId + ","
        + "SkillList:" + Bright.Common.StringUtil.CollectionToString(SkillList) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}