//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class TowerDefense_TowerCfg: Bright.Config.BeanBase
{
    public TowerDefense_TowerCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Type = (PlayerTowerType)_buf.ReadInt();
        Name_l10n_key = _buf.ReadString(); Name = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Labels = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); Labels.Add(_e0);}}
        Icon = _buf.ReadString();
        Radius = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);RelativePosition = new System.Collections.Generic.List<System.Numerics.Vector3>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Numerics.Vector3 _e0;  _e0 = _buf.ReadVector3(); RelativePosition.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);UnitId = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); UnitId.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Num = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); Num.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Level = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); Level.Add(_e0);}}
        BuyTowerCostGold = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);RewardGold = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); RewardGold.Add(_e0);}}
        ReclaimTowerCostGold = _buf.ReadInt();
        ScaleTowerCostGold = _buf.ReadInt();
        NextTowerId = _buf.ReadString();
        NewTowerCostCount = _buf.ReadInt();
        AiCfgId = _buf.ReadString();
        PostInit();
    }

    public static TowerDefense_TowerCfg DeserializeTowerDefense_TowerCfg(ByteBuf _buf)
    {
        return new TowerDefense_TowerCfg(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public PlayerTowerType Type { get; private set; }
    public string Name { get; private set; }
    public string Name_l10n_key { get; }
    /// <summary>
    /// 标签
    /// </summary>
    public System.Collections.Generic.List<string> Labels { get; private set; }
    /// <summary>
    /// icon资源路径
    /// </summary>
    public string Icon { get; private set; }
    public ResIconCfg Icon_Ref { get; private set; }
    /// <summary>
    /// 半径
    /// </summary>
    public float Radius { get; private set; }
    /// <summary>
    /// 相对位置
    /// </summary>
    public System.Collections.Generic.List<System.Numerics.Vector3> RelativePosition { get; private set; }
    /// <summary>
    /// unitId
    /// </summary>
    public System.Collections.Generic.List<string> UnitId { get; private set; }
    public System.Collections.Generic.List<UnitCfg> UnitId_Ref { get; private set; }
    /// <summary>
    /// 数量
    /// </summary>
    public System.Collections.Generic.List<int> Num { get; private set; }
    /// <summary>
    /// 等级
    /// </summary>
    public System.Collections.Generic.List<int> Level { get; private set; }
    /// <summary>
    /// 购买消耗金币
    /// </summary>
    public int BuyTowerCostGold { get; private set; }
    /// <summary>
    /// 击杀奖励金币
    /// </summary>
    public System.Collections.Generic.List<int> RewardGold { get; private set; }
    /// <summary>
    /// 回收塔消耗金币
    /// </summary>
    public int ReclaimTowerCostGold { get; private set; }
    /// <summary>
    /// 出售塔获得金币
    /// </summary>
    public int ScaleTowerCostGold { get; private set; }
    /// <summary>
    /// 下一级id
    /// </summary>
    public string NextTowerId { get; private set; }
    public TowerDefense_TowerCfg NextTowerId_Ref { get; private set; }
    /// <summary>
    /// 升级消耗数量
    /// </summary>
    public int NewTowerCostCount { get; private set; }
    /// <summary>
    /// aiCfgId
    /// </summary>
    public string AiCfgId { get; private set; }

    public const int __ID__ = -1994510109;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        this.Icon_Ref = (_tables["ResIconCfgCategory"] as ResIconCfgCategory).GetOrDefault(Icon);
        { UnitCfgCategory __table = (UnitCfgCategory)_tables["UnitCfgCategory"]; this.UnitId_Ref = new System.Collections.Generic.List<UnitCfg>(); foreach(var __e in UnitId) { this.UnitId_Ref.Add(__table.GetOrDefault(__e)); } }
        this.NextTowerId_Ref = (_tables["TowerDefense_TowerCfgCategory"] as TowerDefense_TowerCfgCategory).GetOrDefault(NextTowerId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Name = translator(Name_l10n_key, Name);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Type:" + Type + ","
        + "Name:" + Name + ","
        + "Labels:" + Bright.Common.StringUtil.CollectionToString(Labels) + ","
        + "Icon:" + Icon + ","
        + "Radius:" + Radius + ","
        + "RelativePosition:" + Bright.Common.StringUtil.CollectionToString(RelativePosition) + ","
        + "UnitId:" + Bright.Common.StringUtil.CollectionToString(UnitId) + ","
        + "Num:" + Bright.Common.StringUtil.CollectionToString(Num) + ","
        + "Level:" + Bright.Common.StringUtil.CollectionToString(Level) + ","
        + "BuyTowerCostGold:" + BuyTowerCostGold + ","
        + "RewardGold:" + Bright.Common.StringUtil.CollectionToString(RewardGold) + ","
        + "ReclaimTowerCostGold:" + ReclaimTowerCostGold + ","
        + "ScaleTowerCostGold:" + ScaleTowerCostGold + ","
        + "NextTowerId:" + NextTowerId + ","
        + "NewTowerCostCount:" + NewTowerCostCount + ","
        + "AiCfgId:" + AiCfgId + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}