//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

/// <summary>
/// Aoe目标筛选器
/// </summary>
public sealed partial class AoeTargetCondition: Bright.Config.BeanBase
{
    public AoeTargetCondition(ByteBuf _buf) 
    {
        Radius = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ActionCondition1 = new System.Collections.Generic.List<SubCondition>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { SubCondition _e0;  _e0 = SubCondition.DeserializeSubCondition(_buf); ActionCondition1.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ActionCondition2 = new System.Collections.Generic.List<SubCondition>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { SubCondition _e0;  _e0 = SubCondition.DeserializeSubCondition(_buf); ActionCondition2.Add(_e0);}}
        PostInit();
    }

    public static AoeTargetCondition DeserializeAoeTargetCondition(ByteBuf _buf)
    {
        return new AoeTargetCondition(_buf);
    }

    /// <summary>
    /// 范围半径(米)
    /// </summary>
    public float Radius { get; private set; }
    /// <summary>
    /// 条件1
    /// </summary>
    public System.Collections.Generic.List<SubCondition> ActionCondition1 { get; private set; }
    /// <summary>
    /// 条件2
    /// </summary>
    public System.Collections.Generic.List<SubCondition> ActionCondition2 { get; private set; }

    public const int __ID__ = -189383757;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var _e in ActionCondition1) { _e?.Resolve(_tables); }
        foreach(var _e in ActionCondition2) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in ActionCondition1) { _e?.TranslateText(translator); }
        foreach(var _e in ActionCondition2) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Radius:" + Radius + ","
        + "ActionCondition1:" + Bright.Common.StringUtil.CollectionToString(ActionCondition1) + ","
        + "ActionCondition2:" + Bright.Common.StringUtil.CollectionToString(ActionCondition2) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}