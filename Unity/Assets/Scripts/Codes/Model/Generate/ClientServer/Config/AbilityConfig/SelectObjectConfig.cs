//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.AbilityConfig
{

public sealed partial class SelectObjectConfig: Bright.Config.BeanBase
{
    public SelectObjectConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        IsSaveTarget = _buf.ReadBool();
        IsSaveTargetOnce = _buf.ReadBool();
        IsChgToSelectPos = _buf.ReadBool();
        SelectNum = _buf.ReadInt();
        SelectObjectType = (SelectObjectType)_buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SelectOrder = new System.Collections.Generic.List<SelectObjectOrder>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { SelectObjectOrder _e0;  _e0 = SelectObjectOrder.DeserializeSelectObjectOrder(_buf); SelectOrder.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SelectPreCondition = new System.Collections.Generic.List<SubCondition>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { SubCondition _e0;  _e0 = SubCondition.DeserializeSubCondition(_buf); SelectPreCondition.Add(_e0);}}
        ActionCallParam = ActionCallParam.DeserializeActionCallParam(_buf);
        PostInit();
    }

    public static SelectObjectConfig DeserializeSelectObjectConfig(ByteBuf _buf)
    {
        return new SelectObjectConfig(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 是否存储选择结果
    /// </summary>
    public bool IsSaveTarget { get; private set; }
    /// <summary>
    /// 是否存储选择结果(每次timeline攻击清空)
    /// </summary>
    public bool IsSaveTargetOnce { get; private set; }
    /// <summary>
    /// 是否转为记录成Pos位置信息(需要在特定位置施法有效,因为unit可能已走开)
    /// </summary>
    public bool IsChgToSelectPos { get; private set; }
    /// <summary>
    /// 选取的数量(-1表示不限制)
    /// </summary>
    public int SelectNum { get; private set; }
    /// <summary>
    /// 选取对象的类型
    /// </summary>
    public SelectObjectType SelectObjectType { get; private set; }
    /// <summary>
    /// 对象选择排序规则
    /// </summary>
    public System.Collections.Generic.List<SelectObjectOrder> SelectOrder { get; private set; }
    /// <summary>
    /// 前置条件(cond11&amp;cond12|cond21&amp;cond22)
    /// </summary>
    public System.Collections.Generic.List<SubCondition> SelectPreCondition { get; private set; }
    public ActionCallParam ActionCallParam { get; private set; }

    public const int __ID__ = 962728605;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        foreach(var _e in SelectOrder) { _e?.Resolve(_tables); }
        foreach(var _e in SelectPreCondition) { _e?.Resolve(_tables); }
        ActionCallParam?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in SelectOrder) { _e?.TranslateText(translator); }
        foreach(var _e in SelectPreCondition) { _e?.TranslateText(translator); }
        ActionCallParam?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "IsSaveTarget:" + IsSaveTarget + ","
        + "IsSaveTargetOnce:" + IsSaveTargetOnce + ","
        + "IsChgToSelectPos:" + IsChgToSelectPos + ","
        + "SelectNum:" + SelectNum + ","
        + "SelectObjectType:" + SelectObjectType + ","
        + "SelectOrder:" + Bright.Common.StringUtil.CollectionToString(SelectOrder) + ","
        + "SelectPreCondition:" + Bright.Common.StringUtil.CollectionToString(SelectPreCondition) + ","
        + "ActionCallParam:" + ActionCallParam + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}